{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.4.4",
  "parameters": {},
  "variables": {},
  "resources": [
    {
      "type": "microsoft.insights/workbooks",
      "apiVersion": "2023-06-01",
      "name": "aa16f2f4-3c70-4eae-b7f0-7fab609f38e9",
      "location": "westeurope",
      "tags": {
        "hidden-title": "Regulatory Compliance Dashboard"
      },
      "kind": "shared",
      "identity": {
        "type": "None"
      },
      "properties": {
        "displayName": "Regulatory Compliance Dashboard",
        "version": "Notebook/1.0",
        "category": "workbook",
        "sourceId": "azure security center",
        "serializedData": "{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":{\"json\":\"# Regulatory Compliance Dashboard\\n\"},\"customWidth\":\"50\",\"name\":\"text - 0\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"crossComponentResources\":[\"value::tenant\"],\"parameters\":[{\"id\":\"f9604af0-6426-4c26-8149-974950332bc5\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"_policy_set_definition_name\",\"label\":\"Policy Set\",\"type\":2,\"description\":\"Regulatory compliance policy definitions with at least one assigment in the current tenant\",\"isRequired\":true,\"query\":\"policyresources\\n| where type =~'Microsoft.Authorization/PolicyAssignments'\\n| extend policy_assignment_id = tolower(tostring(id))\\n| extend policy_definition_id = tolower(tostring(properties.policyDefinitionId))\\n| join kind=inner \\n(\\n policyresources\\n | where type =~'Microsoft.Authorization/PolicySetDefinitions' \\n | extend policy_set_definition_id = tolower(id)\\n | where properties.metadata.category =~ 'Regulatory Compliance'\\n | extend policy_set_definition_display_name = tostring(properties.displayName)\\n | project policy_set_definition_id, policy_set_definition_display_name\\n) on $left.policy_definition_id == $right.policy_set_definition_id\\n| extend s = split(policy_set_definition_id, '/')\\n| extend l = array_length(s)\\n| extend policy_set_definition_name = tolower(s[l-1])\\n| distinct policy_set_definition_name, policy_set_definition_display_name\\n| order by policy_set_definition_display_name\\n| project Id=policy_set_definition_name, Label=policy_set_definition_display_name, Selected=true\",\"crossComponentResources\":[\"value::tenant\"],\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"value\":\"bio\"},{\"id\":\"3a5cac74-b8a9-4908-8492-0e4eb7cb6486\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"_assignment\",\"label\":\"Assignment\",\"type\":2,\"isRequired\":true,\"query\":\"policyresources\\n| where type =~'Microsoft.Authorization/PolicyAssignments'\\n| where properties.policyDefinitionId endswith '{_policy_set_definition_name}'\\n| extend policy_assignment_id = tolower(tostring(id))\\n| extend policy_definition_id = tolower(tostring(properties.policyDefinitionId))\\n| extend policy_assignment_details = tostring(pack_all())\\n| extend scope = tolower(tostring(properties.scope))\\n| join ( \\n resourcecontainers\\n | project id=tolower(id), container_name=name\\n) on $left.scope == $right.id\\n| extend scope_s = split(scope, '/')\\n| project Id=policy_assignment_id, Assignment = container_name, selected=true\",\"crossComponentResources\":[\"value::tenant\"],\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\"},{\"id\":\"c998dd33-b990-45c8-9987-dabc646178d6\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"_subscriptions\",\"label\":\"Subscriptions\",\"type\":6,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"policyresources\\n| where type == \\\"microsoft.policyinsights/policystates\\\"\\n| where properties.policyAssignmentId == '{_assignment}'\\n| extend subscription_id=tolower(subscriptionId)\\n| join ( \\n resourcecontainers\\n | where type == \\\"microsoft.resources/subscriptions\\\"\\n | where properties.state =~ 'Enabled'\\n | project subscription_id=tolower(subscriptionId), subscription_name=name\\n) on subscription_id\\n| distinct subscription_id, subscription_name\\n| project Id=subscription_id, Label=subscription_name, Selected=true\",\"crossComponentResources\":[\"value::tenant\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"defaultValue\":\"value::all\",\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"value\":[\"value::all\"]},{\"id\":\"96a8e5e5-ee6a-4e10-809d-007b71b1335d\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"_policy_set_definition_id\",\"type\":1,\"isRequired\":true,\"query\":\"policyresources \\n| where type == \\\"microsoft.authorization/policyassignments\\\"\\n| where id =~ '{_assignment}' // selector\\n| extend policy_set_definition_id = tolower(tostring(properties.policyDefinitionId))\\n| project policy_set_definition_id\",\"crossComponentResources\":[\"value::tenant\"],\"isHiddenWhenLocked\":true,\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\"},{\"id\":\"f42891a8-4a24-4983-aa22-76d46a8db074\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"_assignment_scope\",\"type\":1,\"isRequired\":true,\"query\":\"policyresources\\n| where type =~'Microsoft.Authorization/PolicyAssignments'\\n| extend policy_assignment_id = tolower(tostring(id))\\n| where policy_assignment_id == '{_assignment}'\\n| extend scope = tolower(tostring(properties.scope))\\n| project scope\",\"crossComponentResources\":[\"value::tenant\"],\"isHiddenWhenLocked\":true,\"timeContext\":{\"durationMs\":86400000},\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\"},{\"id\":\"78884f94-5066-4b1a-b8eb-50f0b2a0d7d6\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"_template_version\",\"type\":1,\"description\":\"format: 0.0.0.0\",\"isRequired\":true,\"isHiddenWhenLocked\":true,\"value\":\"1.0.4.4\"},{\"id\":\"4bb1099f-4571-473d-8e7b-89a13084ba33\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"_selected_tab\",\"type\":1,\"isGlobal\":true,\"isHiddenWhenLocked\":true,\"timeContext\":{\"durationMs\":86400000},\"value\":\"overview\"}],\"style\":\"above\",\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\"},\"customWidth\":\"50\",\"name\":\"parameters-main\"},{\"type\":11,\"content\":{\"version\":\"LinkItem/1.0\",\"style\":\"tabs\",\"links\":[{\"id\":\"19b70739-ff6f-437e-bcb6-57076bb20155\",\"cellValue\":\"_selected_tab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Overview\",\"subTarget\":\"overview\",\"preText\":\"\",\"style\":\"link\"},{\"id\":\"5575c357-016f-4c30-a367-ca6601e8ade4\",\"cellValue\":\"_selected_tab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"By Control\",\"subTarget\":\"by_control\",\"style\":\"link\"},{\"id\":\"401634b1-9eab-4cc4-93b3-72f7c7d7d807\",\"cellValue\":\"_selected_tab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"By Policy Definition\",\"subTarget\":\"by_policy_definition\",\"style\":\"link\"},{\"id\":\"7efe46d5-644c-4dd0-b1a2-a5e7b9970a12\",\"cellValue\":\"_selected_tab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"By Resource\",\"subTarget\":\"by_resource\",\"style\":\"link\"},{\"id\":\"c2ad1ae9-1507-4429-9e68-3f3d479fa7c7\",\"cellValue\":\"_selected_tab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Exempts\",\"subTarget\":\"exempts\",\"style\":\"link\"},{\"id\":\"bd65714b-5b8a-404a-8ed2-439588abdac6\",\"cellValue\":\"_selected_tab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Assignment\",\"subTarget\":\"assignment\",\"style\":\"link\"},{\"id\":\"d4d67adb-9bd4-4dcf-bac2-c4199316e7a7\",\"cellValue\":\"_selected_tab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Recommendations\",\"subTarget\":\"recommendations\",\"style\":\"link\"},{\"id\":\"c3eaca3c-0575-4453-8b0b-44d5a953f95d\",\"cellValue\":\"_selected_tab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Export\",\"subTarget\":\"export\",\"style\":\"link\"},{\"id\":\"f25916e2-56e5-4706-b89b-a1fc84c4677e\",\"cellValue\":\"_selected_tab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"State Changes\",\"subTarget\":\"state_changes\",\"style\":\"link\"}]},\"name\":\"links - 2\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"### Policy Compliance Status\\nConsolidated compliance status of controls, policies and resources in the context of the selected policy set.\"},\"name\":\"text - compliance_status\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"policyresources \\n| where type =~ 'Microsoft.PolicyInsights/PolicyStates'\\n| extend policy_assignment_id = tolower(tostring(properties.policyAssignmentId))\\n| where policy_assignment_id == '{_assignment}'\\n| extend subscription_id = tolower(tostring(properties.subscriptionId))\\n| where subscription_id in~ ({_subscriptions:subid})\\n| extend state_weight = toint(properties.stateWeight)\\n| extend policy_definition_group_names = iff(isnotnull(properties.policyDefinitionGroupNames), properties.policyDefinitionGroupNames, dynamic(['']))\\n| mv-expand policy_definition_group_names limit 2000\\n| extend policy_definition_group_name = tolower(tostring(policy_definition_group_names))\\n| summarize max_state_weight=max(state_weight) by policy_definition_group_name\\n| summarize counts = count() by policy_definition_group_name, max_state_weight\\n| extend compliance_state = case (\\n max_state_weight == 300, 'noncompliant',\\n max_state_weight == 200, 'compliant',\\n max_state_weight == 150, 'error',\\n max_state_weight == 100, 'conflict',\\n max_state_weight == 75, 'protected',\\n max_state_weight == 50, 'exempt',\\n max_state_weight == 10, 'unknown',\\n max_state_weight == 0,'notapplicable', \\n 'notapplicable'\\n)\\n| project compliance_state, counts\",\"size\":4,\"title\":\"By Control\",\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"crossComponentResources\":[\"value::tenant\"],\"visualization\":\"piechart\",\"chartSettings\":{\"yAxis\":[\"counts\"],\"seriesLabelSettings\":[{\"seriesName\":\"noncompliant\",\"color\":\"redBright\"},{\"seriesName\":\"compliant\",\"color\":\"green\"},{\"seriesName\":\"exempt\",\"color\":\"gray\"},{\"seriesName\":\"\",\"color\":\"blue\"}]}},\"customWidth\":\"33\",\"name\":\"query - control_compliance_status\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"policyresources \\n| where type =~ 'Microsoft.PolicyInsights/PolicyStates'\\n| extend policy_assignment_id = tolower(tostring(properties.policyAssignmentId))\\n| where policy_assignment_id == '{_assignment}'\\n| extend subscription_id = tolower(tostring(properties.subscriptionId))\\n| where subscription_id in~ ({_subscriptions:subid})\\n| extend state_weight = toint(properties.stateWeight)\\n| extend policy_definition_id = tolower(tostring(properties.policyDefinitionId))\\n| summarize max_state_weight=max(state_weight) by policy_definition_id\\n| summarize counts = count() by policy_definition_id, max_state_weight\\n| extend compliance_state = case (\\n max_state_weight == 300, 'noncompliant',\\n max_state_weight == 200, 'compliant',\\n max_state_weight == 150, 'error',\\n max_state_weight == 100, 'conflict',\\n max_state_weight == 75, 'protected',\\n max_state_weight == 50, 'exempt',\\n max_state_weight == 10, 'unknown',\\n max_state_weight == 0,'notapplicable', \\n 'notapplicable'\\n)\\n| project compliance_state, counts \\n\\n\\n \",\"size\":4,\"title\":\"By Policy Definition\",\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"crossComponentResources\":[\"value::tenant\"],\"visualization\":\"piechart\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"compliance_state\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"counts\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"graphSettings\":{\"type\":0,\"topContent\":{\"columnMatch\":\"compliance_state\",\"formatter\":1},\"centerContent\":{\"columnMatch\":\"counts\",\"formatter\":1,\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"noncompliant\",\"color\":\"redBright\"},{\"seriesName\":\"compliant\",\"color\":\"green\"},{\"seriesName\":\"exempt\",\"color\":\"gray\"},{\"color\":\"blue\"}]}},\"customWidth\":\"33\",\"name\":\"query - policy_compliance_status\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"policyresources \\n| where type =~ 'Microsoft.PolicyInsights/PolicyStates'\\n| extend policy_assignment_id = tolower(tostring(properties.policyAssignmentId))\\n| where policy_assignment_id == '{_assignment}'\\n| extend subscription_id = tolower(tostring(properties.subscriptionId))\\n| where subscription_id in~ ({_subscriptions:subid})\\n| extend policy_set_definition_id = tolower(properties.policySetDefinitionId)\\n| extend state_weight = toint(properties.stateWeight)\\n| extend resource_id = tolower(tostring(properties.resourceId))\\n| extend policy_definition_id = tolower(tostring(properties.policyDefinitionId))\\n| summarize max_state_weight=max(state_weight) by resource_id\\n| summarize counts = count() by resource_id, max_state_weight\\n| extend compliance_state = case (\\n max_state_weight == 300, 'noncompliant',\\n max_state_weight == 200, 'compliant',\\n max_state_weight == 150, 'error',\\n max_state_weight == 100, 'conflict',\\n max_state_weight == 75, 'protected',\\n max_state_weight == 50, 'exempt',\\n max_state_weight == 10, 'unknown',\\n max_state_weight == 0,'notapplicable', \\n 'notapplicable'\\n)\\n| project compliance_state, counts \\n\\n\\n \",\"size\":4,\"title\":\"By Resource\",\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"crossComponentResources\":[\"value::tenant\"],\"visualization\":\"piechart\",\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"compliant\",\"color\":\"green\"},{\"seriesName\":\"noncompliant\",\"color\":\"redBright\"},{\"seriesName\":\"exempt\",\"color\":\"gray\"},{\"color\":\"blue\"}]}},\"customWidth\":\"33\",\"name\":\"query - resource_compliance_status\"},{\"type\":1,\"content\":{\"json\":\"---\"},\"name\":\"text - 7\"},{\"type\":1,\"content\":{\"json\":\"### Security Recommendation Status\\nMicrosoft Defender for Cloud security recommendations in the context of the selected policy set.\"},\"name\":\"text - compliance_status - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"// query taken from Microsoft Defender for Cloud portal \\n// modifications are marked in query\\nsecurityresources\\n        | where type == \\\"microsoft.security/assessments\\\" or type == \\\"microsoft.security/assessments/governanceassignments\\\"\\n        | where subscriptionId in~ ({_subscriptions:subid})\\n        | extend source = iff(type == \\\"microsoft.security/assessments\\\", trim(' ', tolower(tostring(properties.resourceDetails.Source))), dynamic(null))\\n        | extend resourceId = iff(type == \\\"microsoft.security/assessments\\\", trim(\\\" \\\", tolower(tostring(case(source =~ \\\"azure\\\", properties.resourceDetails.Id,\\n            (type == \\\"microsoft.security/assessments\\\" and (source =~ \\\"aws\\\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)))), properties.resourceDetails.Id,\\n            (type == \\\"microsoft.security/assessments\\\" and (source =~ \\\"gcp\\\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)))), properties.resourceDetails.Id,\\n            source =~ \\\"aws\\\", properties.resourceDetails.AzureResourceId,\\n            source =~ \\\"gcp\\\", properties.resourceDetails.AzureResourceId,\\n            extract(\\\"^(?i)(.+)/providers/Microsoft.Security/assessments/.+$\\\",1,id)\\n            )))), dynamic(null))\\n        | extend isAssessment = iff(type == \\\"microsoft.security/assessments\\\", 1, 0)\\n        | extend isAssignment = iff(type == \\\"microsoft.security/assessments/governanceassignments\\\", 1, 0)\\n        | extend assessmentId = iff(type == \\\"microsoft.security/assessments\\\", id, dynamic(null))\\n        | extend assignedResourceId = iff(type == \\\"microsoft.security/assessments/governanceassignments\\\", tostring(properties.assignedResourceId), dynamic(null))\\n        | extend idForSummarize = iff(isAssessment == 1, tolower(assessmentId), tolower(assignedResourceId))\\n        | extend assessmentKey = iff(type == \\\"microsoft.security/assessments\\\", name, dynamic(null))\\n        | extend assessmentDisplayName = iff(type == \\\"microsoft.security/assessments\\\", tostring(properties.displayName), dynamic(null))\\n        | extend displayName = assessmentDisplayName\\n        | project-away assessmentDisplayName\\n        | extend statusCode = iff(type == \\\"microsoft.security/assessments\\\", tostring(properties.status.code), dynamic(null))\\n        | extend isUnhealthy = iff(statusCode == \\\"Unhealthy\\\", 1, 0)\\n        | extend maturityLevel = iff(type == \\\"microsoft.security/assessments\\\", case(\\n                    isnull(properties.metadata.preview), \\\"GA\\\",\\n                    tobool(properties.metadata.preview), \\\"Preview\\\",\\n                    \\\"GA\\\"), dynamic(null))\\n        | extend statusPerInitiative = todynamic(properties.statusPerInitiative)\\n        | extend regexResourceId = iff(type == \\\"microsoft.security/assessments\\\", extract_all(@\\\"/providers/([^/]+)(?:/([^/]+)/[^/]+(?:/([^/]+)/[^/]+)?)?/([^/]+)/[^/]+(?:/([^/]+)/[^/]+(?:/([^/]+)/[^/]+)?)?$\\\", resourceId), dynamic(null))\\n        | extend regexResourceType = iff(type == \\\"microsoft.security/assessments\\\", regexResourceId[0], dynamic(null))\\n        | extend providerName = iff(type == \\\"microsoft.security/assessments\\\", regexResourceType[0], dynamic(null))\\n        | extend mainType = iff(type == \\\"microsoft.security/assessments\\\", case(regexResourceType[1] !~ \\\"\\\", strcat(\\\"/\\\",regexResourceType[1]), \\\"\\\"), dynamic(null))\\n        | extend extendedType = iff(type == \\\"microsoft.security/assessments\\\", case(regexResourceType[2] !~ \\\"\\\", strcat(\\\"/\\\",regexResourceType[2]), \\\"\\\"), dynamic(null))\\n        | extend resourceType = iff(type == \\\"microsoft.security/assessments\\\", case(regexResourceType[3] !~ \\\"\\\", strcat(\\\"/\\\",regexResourceType[3]), \\\"\\\"), dynamic(null))\\n        | extend additionalType = iff(type == \\\"microsoft.security/assessments\\\", case(regexResourceType[4] !~ \\\"\\\", strcat(\\\"/\\\",regexResourceType[4]), \\\"\\\"), dynamic(null))\\n        | extend typeFullPath = iff(type == \\\"microsoft.security/assessments\\\", tolower(properties.resourceDetails.ResourceType), dynamic(null))\\n        | extend severity = iff(type == \\\"microsoft.security/assessments\\\", tostring(properties.metadata.severity), dynamic(null))\\n        | extend severityNumber = iff(type == \\\"microsoft.security/assessments\\\", case(\\n                    severity == \\\"Low\\\", 1,\\n                    severity == \\\"Medium\\\", 2,\\n                    severity == \\\"High\\\", 3,\\n                    dynamic(null)\\n                ), dynamic(null))\\n        | extend environment = iff(type == \\\"microsoft.security/assessments\\\", case(\\n                    source == \\\"azure\\\" or source == \\\"onpremise\\\", \\\"Azure\\\",\\n                    source == \\\"aws\\\", \\\"AWS\\\",\\n                    source == \\\"gcp\\\", \\\"GCP\\\",\\n                    source == \\\"github\\\", \\\"GitHub\\\",\\n                    source == \\\"azuredevops\\\", \\\"AzureDevOps\\\",\\n                    dynamic(null)\\n                ), dynamic(null))\\n| where ((environment =~ \\\"AWS\\\" or environment =~ \\\"Azure\\\" or environment =~ \\\"AzureDevOps\\\" or environment =~ \\\"GCP\\\" or environment =~ \\\"GitHub\\\")) or (isAssessment == 0)\\n        | extend dueDate = iff(type == \\\"microsoft.security/assessments/governanceassignments\\\", todatetime(properties.remediationDueDate), dynamic(null))\\n        | extend eta = iff(type == \\\"microsoft.security/assessments/governanceassignments\\\", todatetime(properties.remediationEta.eta), dynamic(null))\\n        | extend govCompletionStatus = iff(type == \\\"microsoft.security/assessments/governanceassignments\\\", case(\\n                            isnull(todatetime(properties.remediationDueDate)), \\\"NoDueDate\\\",\\n                            // We round up the current date time to be the start of the day, as the due date is inclusive\\n                            todatetime(properties.remediationDueDate) >= bin(now(), 1d), \\\"OnTime\\\",\\n                            \\\"Overdue\\\"\\n                        ), dynamic(null))\\n        | extend isGracePeriod = iff(type == \\\"microsoft.security/assessments/governanceassignments\\\", iff(govCompletionStatus == \\\"OnTime\\\", tobool(properties.isGracePeriod), false), dynamic(null))\\n        | summarize \\n                    statusPerInitiative = anyif(statusPerInitiative, isAssessment == 1),\\n                    source = anyif(source, isAssessment == 1),\\n                    assessmentKey = anyif(assessmentKey, isAssessment == 1),\\n                    resourceId = anyif(resourceId, isAssessment == 1),\\n                    displayName = anyif(displayName, isAssessment == 1),\\n                    statusCode = anyif(statusCode, isAssessment == 1),\\n                    maturityLevel = anyif(maturityLevel, isAssessment == 1),\\n                    severity = anyif(severity, isAssessment == 1),\\n                    severityNumber = anyif(severityNumber, isAssessment == 1),\\n                    environment = anyif(environment, isAssessment == 1),\\n                    isUnhealthy = anyif(isUnhealthy, isAssessment == 1),\\n                    typeFullPath = anyif(typeFullPath, isAssessment == 1),\\n                    dueDate = anyif(dueDate, isAssignment == 1),\\n                    eta = anyif(eta, isAssignment == 1),\\n                    isGracePeriod = anyif(isGracePeriod, isAssignment == 1),\\n                    govCompletionStatus = anyif(govCompletionStatus, isAssignment == 1),\\n                    hasAssignment = max(isAssignment),\\n                    hasAssessmentData = sum(isAssessment) by idForSummarize\\n        | where hasAssessmentData > 0\\n        | mv-expand statusPerInitiative limit 400\\n        | extend policyInitiativeName = tostring(statusPerInitiative.policyInitiativeName)\\n        // Modification: only show recommendations for selected policy set\\n        | extend policyInitiativeId= tostring(statusPerInitiative.policyInitiativeId)\\n        | where policyInitiativeId =~ split('{_policy_set_definition_id}', '/')[-1]\\n        // End modification\\n        | extend now = now()\\n        | extend completionStatus = case(\\n            isUnhealthy == 0, \\\"Completed\\\", \\n            govCompletionStatus == \\\"Overdue\\\", \\\"Overdue\\\",\\n            govCompletionStatus == \\\"OnTime\\\", \\\"OnTime\\\",\\n            \\\"Unassigned\\\")\\n        //| where ((completionStatus =~ \\\"Unassigned\\\"))\\n        | extend completionStatusNumber = case(\\n            completionStatus == \\\"Completed\\\", 0,\\n            completionStatus in (\\\"Unassigned\\\", \\\"Unhealthy\\\"), 1,\\n            completionStatus == \\\"OnTime\\\", 2,\\n            completionStatus == \\\"Overdue\\\", 3,\\n            -1)\\n        | summarize initiatives = make_set_if(policyInitiativeName, isnotempty(policyInitiativeName)),\\n                    //source = any(source),\\n                    assessmentKey = any(assessmentKey),\\n                    displayName = any(displayName),\\n                    statusCode = any(statusCode),\\n                    maturityLevel = any(maturityLevel),\\n                    severity = any(severity),\\n                    severityNumber = any(severityNumber),\\n                    environment = any(environment),\\n                    dueDate = any(dueDate),\\n                    eta = any(eta),\\n                    isGracePeriod = any(isGracePeriod),\\n                    typeFullPath = any(typeFullPath),\\n                    completionStatus = any(completionStatus),\\n                    completionStatusNumber = any(completionStatusNumber) by idForSummarize\\n        | summarize resourceCount = count(),\\n                    environments = make_set(environment),\\n                    displayName = any(displayName),\\n                    maturityLevel = any(maturityLevel),\\n                    initiatives = make_set(initiatives),\\n                    resourceTypes = make_set(typeFullPath),\\n                    severity = any(severity),\\n                    severityNumber = any(severityNumber),\\n                    dueDate = min(dueDate),\\n                    eta = min(eta),\\n                    isGracePeriod = iff(sum(isGracePeriod) > 0, 1, 0),\\n                    completionStatusNumber = max(completionStatusNumber) by assessmentKey, statusCode\\n        | extend statusAndCount = pack(\\\"statusCode\\\", statusCode, \\\"resourceCount\\\", resourceCount)\\n        | summarize statusAndCount = make_list(statusAndCount),\\n                    resourceCount = sum(resourceCount),\\n                    environments = make_set(environments),\\n                    displayName = any(displayName),\\n                    maturityLevel = any(maturityLevel),\\n                    initiatives = make_set(initiatives),\\n                    severity = any(severity),\\n                    severityNumber = any(severityNumber),\\n                    dueDate = min(dueDate),\\n                    eta = min(eta),\\n                    isGracePeriod = iff(sum(isGracePeriod) > 0, 1, 0),\\n                    resourceTypes = make_set(resourceTypes),\\n                    completionStatusNumber = max(completionStatusNumber) by assessmentKey\\n        | extend completionStatus = case(\\n            completionStatusNumber == 0, \\\"Completed\\\",\\n            completionStatusNumber == 1, \\\"Unassigned\\\",\\n            completionStatusNumber == 2, \\\"OnTime\\\",\\n            completionStatusNumber == 3, \\\"Overdue\\\",\\n            \\\"Unknown\\\")\\n        | order by severityNumber desc\\n            | extend controlsData = dynamic([])\\n            | order by severityNumber desc\\n| where severity == \\\"High\\\"\\n| summarize count() by severity, completionStatus\",\"size\":4,\"title\":\"High Severity\",\"noDataMessage\":\"No recommendations where found with severity High\",\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"crossComponentResources\":[\"value::tenant\"],\"visualization\":\"piechart\",\"chartSettings\":{\"yAxis\":[\"count_\"],\"group\":\"completionStatus\",\"createOtherGroup\":null,\"seriesLabelSettings\":[{\"seriesName\":\"Unassigned\",\"color\":\"redBright\"},{\"seriesName\":\"Completed\",\"color\":\"green\"}]}},\"customWidth\":\"33\",\"name\":\"query - high_severity_security_recommendations\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"// query taken from Microsoft Defender for Cloud portal \\n// modifications are marked in query\\nsecurityresources\\n        | where type == \\\"microsoft.security/assessments\\\" or type == \\\"microsoft.security/assessments/governanceassignments\\\"\\n        | where subscriptionId in~ ({_subscriptions:subid})\\n        | extend source = iff(type == \\\"microsoft.security/assessments\\\", trim(' ', tolower(tostring(properties.resourceDetails.Source))), dynamic(null))\\n        | extend resourceId = iff(type == \\\"microsoft.security/assessments\\\", trim(\\\" \\\", tolower(tostring(case(source =~ \\\"azure\\\", properties.resourceDetails.Id,\\n            (type == \\\"microsoft.security/assessments\\\" and (source =~ \\\"aws\\\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)))), properties.resourceDetails.Id,\\n            (type == \\\"microsoft.security/assessments\\\" and (source =~ \\\"gcp\\\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)))), properties.resourceDetails.Id,\\n            source =~ \\\"aws\\\", properties.resourceDetails.AzureResourceId,\\n            source =~ \\\"gcp\\\", properties.resourceDetails.AzureResourceId,\\n            extract(\\\"^(?i)(.+)/providers/Microsoft.Security/assessments/.+$\\\",1,id)\\n            )))), dynamic(null))\\n        | extend isAssessment = iff(type == \\\"microsoft.security/assessments\\\", 1, 0)\\n        | extend isAssignment = iff(type == \\\"microsoft.security/assessments/governanceassignments\\\", 1, 0)\\n        | extend assessmentId = iff(type == \\\"microsoft.security/assessments\\\", id, dynamic(null))\\n        | extend assignedResourceId = iff(type == \\\"microsoft.security/assessments/governanceassignments\\\", tostring(properties.assignedResourceId), dynamic(null))\\n        | extend idForSummarize = iff(isAssessment == 1, tolower(assessmentId), tolower(assignedResourceId))\\n        | extend assessmentKey = iff(type == \\\"microsoft.security/assessments\\\", name, dynamic(null))\\n        | extend assessmentDisplayName = iff(type == \\\"microsoft.security/assessments\\\", tostring(properties.displayName), dynamic(null))\\n        | extend displayName = assessmentDisplayName\\n        | project-away assessmentDisplayName\\n        | extend statusCode = iff(type == \\\"microsoft.security/assessments\\\", tostring(properties.status.code), dynamic(null))\\n        | extend isUnhealthy = iff(statusCode == \\\"Unhealthy\\\", 1, 0)\\n        | extend maturityLevel = iff(type == \\\"microsoft.security/assessments\\\", case(\\n                    isnull(properties.metadata.preview), \\\"GA\\\",\\n                    tobool(properties.metadata.preview), \\\"Preview\\\",\\n                    \\\"GA\\\"), dynamic(null))\\n        | extend statusPerInitiative = todynamic(properties.statusPerInitiative)\\n        | extend regexResourceId = iff(type == \\\"microsoft.security/assessments\\\", extract_all(@\\\"/providers/([^/]+)(?:/([^/]+)/[^/]+(?:/([^/]+)/[^/]+)?)?/([^/]+)/[^/]+(?:/([^/]+)/[^/]+(?:/([^/]+)/[^/]+)?)?$\\\", resourceId), dynamic(null))\\n        | extend regexResourceType = iff(type == \\\"microsoft.security/assessments\\\", regexResourceId[0], dynamic(null))\\n        | extend providerName = iff(type == \\\"microsoft.security/assessments\\\", regexResourceType[0], dynamic(null))\\n        | extend mainType = iff(type == \\\"microsoft.security/assessments\\\", case(regexResourceType[1] !~ \\\"\\\", strcat(\\\"/\\\",regexResourceType[1]), \\\"\\\"), dynamic(null))\\n        | extend extendedType = iff(type == \\\"microsoft.security/assessments\\\", case(regexResourceType[2] !~ \\\"\\\", strcat(\\\"/\\\",regexResourceType[2]), \\\"\\\"), dynamic(null))\\n        | extend resourceType = iff(type == \\\"microsoft.security/assessments\\\", case(regexResourceType[3] !~ \\\"\\\", strcat(\\\"/\\\",regexResourceType[3]), \\\"\\\"), dynamic(null))\\n        | extend additionalType = iff(type == \\\"microsoft.security/assessments\\\", case(regexResourceType[4] !~ \\\"\\\", strcat(\\\"/\\\",regexResourceType[4]), \\\"\\\"), dynamic(null))\\n        | extend typeFullPath = iff(type == \\\"microsoft.security/assessments\\\", tolower(properties.resourceDetails.ResourceType), dynamic(null))\\n        | extend severity = iff(type == \\\"microsoft.security/assessments\\\", tostring(properties.metadata.severity), dynamic(null))\\n        | extend severityNumber = iff(type == \\\"microsoft.security/assessments\\\", case(\\n                    severity == \\\"Low\\\", 1,\\n                    severity == \\\"Medium\\\", 2,\\n                    severity == \\\"High\\\", 3,\\n                    dynamic(null)\\n                ), dynamic(null))\\n        | extend environment = iff(type == \\\"microsoft.security/assessments\\\", case(\\n                    source == \\\"azure\\\" or source == \\\"onpremise\\\", \\\"Azure\\\",\\n                    source == \\\"aws\\\", \\\"AWS\\\",\\n                    source == \\\"gcp\\\", \\\"GCP\\\",\\n                    source == \\\"github\\\", \\\"GitHub\\\",\\n                    source == \\\"azuredevops\\\", \\\"AzureDevOps\\\",\\n                    dynamic(null)\\n                ), dynamic(null))\\n| where ((environment =~ \\\"AWS\\\" or environment =~ \\\"Azure\\\" or environment =~ \\\"AzureDevOps\\\" or environment =~ \\\"GCP\\\" or environment =~ \\\"GitHub\\\")) or (isAssessment == 0)\\n        | extend dueDate = iff(type == \\\"microsoft.security/assessments/governanceassignments\\\", todatetime(properties.remediationDueDate), dynamic(null))\\n        | extend eta = iff(type == \\\"microsoft.security/assessments/governanceassignments\\\", todatetime(properties.remediationEta.eta), dynamic(null))\\n        | extend govCompletionStatus = iff(type == \\\"microsoft.security/assessments/governanceassignments\\\", case(\\n                            isnull(todatetime(properties.remediationDueDate)), \\\"NoDueDate\\\",\\n                            // We round up the current date time to be the start of the day, as the due date is inclusive\\n                            todatetime(properties.remediationDueDate) >= bin(now(), 1d), \\\"OnTime\\\",\\n                            \\\"Overdue\\\"\\n                        ), dynamic(null))\\n        | extend isGracePeriod = iff(type == \\\"microsoft.security/assessments/governanceassignments\\\", iff(govCompletionStatus == \\\"OnTime\\\", tobool(properties.isGracePeriod), false), dynamic(null))\\n        | summarize \\n                    statusPerInitiative = anyif(statusPerInitiative, isAssessment == 1),\\n                    source = anyif(source, isAssessment == 1),\\n                    assessmentKey = anyif(assessmentKey, isAssessment == 1),\\n                    resourceId = anyif(resourceId, isAssessment == 1),\\n                    displayName = anyif(displayName, isAssessment == 1),\\n                    statusCode = anyif(statusCode, isAssessment == 1),\\n                    maturityLevel = anyif(maturityLevel, isAssessment == 1),\\n                    severity = anyif(severity, isAssessment == 1),\\n                    severityNumber = anyif(severityNumber, isAssessment == 1),\\n                    environment = anyif(environment, isAssessment == 1),\\n                    isUnhealthy = anyif(isUnhealthy, isAssessment == 1),\\n                    typeFullPath = anyif(typeFullPath, isAssessment == 1),\\n                    dueDate = anyif(dueDate, isAssignment == 1),\\n                    eta = anyif(eta, isAssignment == 1),\\n                    isGracePeriod = anyif(isGracePeriod, isAssignment == 1),\\n                    govCompletionStatus = anyif(govCompletionStatus, isAssignment == 1),\\n                    hasAssignment = max(isAssignment),\\n                    hasAssessmentData = sum(isAssessment) by idForSummarize\\n        | where hasAssessmentData > 0\\n        | mv-expand statusPerInitiative limit 400\\n        | extend policyInitiativeName = tostring(statusPerInitiative.policyInitiativeName)\\n        // Modification: only show recommendations for selected policy set\\n        | extend policyInitiativeId= tostring(statusPerInitiative.policyInitiativeId)\\n        | where policyInitiativeId =~ split('{_policy_set_definition_id}', '/')[-1]\\n        // End modification\\n        | extend now = now()\\n        | extend completionStatus = case(\\n            isUnhealthy == 0, \\\"Completed\\\", \\n            govCompletionStatus == \\\"Overdue\\\", \\\"Overdue\\\",\\n            govCompletionStatus == \\\"OnTime\\\", \\\"OnTime\\\",\\n            \\\"Unassigned\\\")\\n        //| where ((completionStatus =~ \\\"Unassigned\\\"))\\n        | extend completionStatusNumber = case(\\n            completionStatus == \\\"Completed\\\", 0,\\n            completionStatus in (\\\"Unassigned\\\", \\\"Unhealthy\\\"), 1,\\n            completionStatus == \\\"OnTime\\\", 2,\\n            completionStatus == \\\"Overdue\\\", 3,\\n            -1)\\n        | summarize initiatives = make_set_if(policyInitiativeName, isnotempty(policyInitiativeName)),\\n                    //source = any(source),\\n                    assessmentKey = any(assessmentKey),\\n                    displayName = any(displayName),\\n                    statusCode = any(statusCode),\\n                    maturityLevel = any(maturityLevel),\\n                    severity = any(severity),\\n                    severityNumber = any(severityNumber),\\n                    environment = any(environment),\\n                    dueDate = any(dueDate),\\n                    eta = any(eta),\\n                    isGracePeriod = any(isGracePeriod),\\n                    typeFullPath = any(typeFullPath),\\n                    completionStatus = any(completionStatus),\\n                    completionStatusNumber = any(completionStatusNumber) by idForSummarize\\n        | summarize resourceCount = count(),\\n                    environments = make_set(environment),\\n                    displayName = any(displayName),\\n                    maturityLevel = any(maturityLevel),\\n                    initiatives = make_set(initiatives),\\n                    resourceTypes = make_set(typeFullPath),\\n                    severity = any(severity),\\n                    severityNumber = any(severityNumber),\\n                    dueDate = min(dueDate),\\n                    eta = min(eta),\\n                    isGracePeriod = iff(sum(isGracePeriod) > 0, 1, 0),\\n                    completionStatusNumber = max(completionStatusNumber) by assessmentKey, statusCode\\n        | extend statusAndCount = pack(\\\"statusCode\\\", statusCode, \\\"resourceCount\\\", resourceCount)\\n        | summarize statusAndCount = make_list(statusAndCount),\\n                    resourceCount = sum(resourceCount),\\n                    environments = make_set(environments),\\n                    displayName = any(displayName),\\n                    maturityLevel = any(maturityLevel),\\n                    initiatives = make_set(initiatives),\\n                    severity = any(severity),\\n                    severityNumber = any(severityNumber),\\n                    dueDate = min(dueDate),\\n                    eta = min(eta),\\n                    isGracePeriod = iff(sum(isGracePeriod) > 0, 1, 0),\\n                    resourceTypes = make_set(resourceTypes),\\n                    completionStatusNumber = max(completionStatusNumber) by assessmentKey\\n        | extend completionStatus = case(\\n            completionStatusNumber == 0, \\\"Completed\\\",\\n            completionStatusNumber == 1, \\\"Unassigned\\\",\\n            completionStatusNumber == 2, \\\"OnTime\\\",\\n            completionStatusNumber == 3, \\\"Overdue\\\",\\n            \\\"Unknown\\\")\\n        | order by severityNumber desc\\n            | extend controlsData = dynamic([])\\n            | order by severityNumber desc\\n| where severity == \\\"Medium\\\"\\n| summarize count() by severity, completionStatus\",\"size\":4,\"title\":\"Medium Severity\",\"noDataMessage\":\"No recommendations where found with severity Medium\",\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"crossComponentResources\":[\"value::tenant\"],\"visualization\":\"piechart\",\"chartSettings\":{\"yAxis\":[\"count_\"],\"group\":\"completionStatus\",\"createOtherGroup\":null,\"seriesLabelSettings\":[{\"seriesName\":\"Unassigned\",\"color\":\"redBright\"},{\"seriesName\":\"Completed\",\"color\":\"green\"}]}},\"customWidth\":\"33\",\"name\":\"query - medium_severity_security_recommendations\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"// query taken from Microsoft Defender for Cloud portal \\n// modifications are marked in query\\nsecurityresources\\n        | where type == \\\"microsoft.security/assessments\\\" or type == \\\"microsoft.security/assessments/governanceassignments\\\"\\n        | where subscriptionId in~ ({_subscriptions:subid})\\n        | extend source = iff(type == \\\"microsoft.security/assessments\\\", trim(' ', tolower(tostring(properties.resourceDetails.Source))), dynamic(null))\\n        | extend resourceId = iff(type == \\\"microsoft.security/assessments\\\", trim(\\\" \\\", tolower(tostring(case(source =~ \\\"azure\\\", properties.resourceDetails.Id,\\n            (type == \\\"microsoft.security/assessments\\\" and (source =~ \\\"aws\\\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)))), properties.resourceDetails.Id,\\n            (type == \\\"microsoft.security/assessments\\\" and (source =~ \\\"gcp\\\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)))), properties.resourceDetails.Id,\\n            source =~ \\\"aws\\\", properties.resourceDetails.AzureResourceId,\\n            source =~ \\\"gcp\\\", properties.resourceDetails.AzureResourceId,\\n            extract(\\\"^(?i)(.+)/providers/Microsoft.Security/assessments/.+$\\\",1,id)\\n            )))), dynamic(null))\\n        | extend isAssessment = iff(type == \\\"microsoft.security/assessments\\\", 1, 0)\\n        | extend isAssignment = iff(type == \\\"microsoft.security/assessments/governanceassignments\\\", 1, 0)\\n        | extend assessmentId = iff(type == \\\"microsoft.security/assessments\\\", id, dynamic(null))\\n        | extend assignedResourceId = iff(type == \\\"microsoft.security/assessments/governanceassignments\\\", tostring(properties.assignedResourceId), dynamic(null))\\n        | extend idForSummarize = iff(isAssessment == 1, tolower(assessmentId), tolower(assignedResourceId))\\n        | extend assessmentKey = iff(type == \\\"microsoft.security/assessments\\\", name, dynamic(null))\\n        | extend assessmentDisplayName = iff(type == \\\"microsoft.security/assessments\\\", tostring(properties.displayName), dynamic(null))\\n        | extend displayName = assessmentDisplayName\\n        | project-away assessmentDisplayName\\n        | extend statusCode = iff(type == \\\"microsoft.security/assessments\\\", tostring(properties.status.code), dynamic(null))\\n        | extend isUnhealthy = iff(statusCode == \\\"Unhealthy\\\", 1, 0)\\n        | extend maturityLevel = iff(type == \\\"microsoft.security/assessments\\\", case(\\n                    isnull(properties.metadata.preview), \\\"GA\\\",\\n                    tobool(properties.metadata.preview), \\\"Preview\\\",\\n                    \\\"GA\\\"), dynamic(null))\\n        | extend statusPerInitiative = todynamic(properties.statusPerInitiative)\\n        | extend regexResourceId = iff(type == \\\"microsoft.security/assessments\\\", extract_all(@\\\"/providers/([^/]+)(?:/([^/]+)/[^/]+(?:/([^/]+)/[^/]+)?)?/([^/]+)/[^/]+(?:/([^/]+)/[^/]+(?:/([^/]+)/[^/]+)?)?$\\\", resourceId), dynamic(null))\\n        | extend regexResourceType = iff(type == \\\"microsoft.security/assessments\\\", regexResourceId[0], dynamic(null))\\n        | extend providerName = iff(type == \\\"microsoft.security/assessments\\\", regexResourceType[0], dynamic(null))\\n        | extend mainType = iff(type == \\\"microsoft.security/assessments\\\", case(regexResourceType[1] !~ \\\"\\\", strcat(\\\"/\\\",regexResourceType[1]), \\\"\\\"), dynamic(null))\\n        | extend extendedType = iff(type == \\\"microsoft.security/assessments\\\", case(regexResourceType[2] !~ \\\"\\\", strcat(\\\"/\\\",regexResourceType[2]), \\\"\\\"), dynamic(null))\\n        | extend resourceType = iff(type == \\\"microsoft.security/assessments\\\", case(regexResourceType[3] !~ \\\"\\\", strcat(\\\"/\\\",regexResourceType[3]), \\\"\\\"), dynamic(null))\\n        | extend additionalType = iff(type == \\\"microsoft.security/assessments\\\", case(regexResourceType[4] !~ \\\"\\\", strcat(\\\"/\\\",regexResourceType[4]), \\\"\\\"), dynamic(null))\\n        | extend typeFullPath = iff(type == \\\"microsoft.security/assessments\\\", tolower(properties.resourceDetails.ResourceType), dynamic(null))\\n        | extend severity = iff(type == \\\"microsoft.security/assessments\\\", tostring(properties.metadata.severity), dynamic(null))\\n        | extend severityNumber = iff(type == \\\"microsoft.security/assessments\\\", case(\\n                    severity == \\\"Low\\\", 1,\\n                    severity == \\\"Medium\\\", 2,\\n                    severity == \\\"High\\\", 3,\\n                    dynamic(null)\\n                ), dynamic(null))\\n        | extend environment = iff(type == \\\"microsoft.security/assessments\\\", case(\\n                    source == \\\"azure\\\" or source == \\\"onpremise\\\", \\\"Azure\\\",\\n                    source == \\\"aws\\\", \\\"AWS\\\",\\n                    source == \\\"gcp\\\", \\\"GCP\\\",\\n                    source == \\\"github\\\", \\\"GitHub\\\",\\n                    source == \\\"azuredevops\\\", \\\"AzureDevOps\\\",\\n                    dynamic(null)\\n                ), dynamic(null))\\n| where ((environment =~ \\\"AWS\\\" or environment =~ \\\"Azure\\\" or environment =~ \\\"AzureDevOps\\\" or environment =~ \\\"GCP\\\" or environment =~ \\\"GitHub\\\")) or (isAssessment == 0)\\n        | extend dueDate = iff(type == \\\"microsoft.security/assessments/governanceassignments\\\", todatetime(properties.remediationDueDate), dynamic(null))\\n        | extend eta = iff(type == \\\"microsoft.security/assessments/governanceassignments\\\", todatetime(properties.remediationEta.eta), dynamic(null))\\n        | extend govCompletionStatus = iff(type == \\\"microsoft.security/assessments/governanceassignments\\\", case(\\n                            isnull(todatetime(properties.remediationDueDate)), \\\"NoDueDate\\\",\\n                            // We round up the current date time to be the start of the day, as the due date is inclusive\\n                            todatetime(properties.remediationDueDate) >= bin(now(), 1d), \\\"OnTime\\\",\\n                            \\\"Overdue\\\"\\n                        ), dynamic(null))\\n        | extend isGracePeriod = iff(type == \\\"microsoft.security/assessments/governanceassignments\\\", iff(govCompletionStatus == \\\"OnTime\\\", tobool(properties.isGracePeriod), false), dynamic(null))\\n        | summarize \\n                    statusPerInitiative = anyif(statusPerInitiative, isAssessment == 1),\\n                    source = anyif(source, isAssessment == 1),\\n                    assessmentKey = anyif(assessmentKey, isAssessment == 1),\\n                    resourceId = anyif(resourceId, isAssessment == 1),\\n                    displayName = anyif(displayName, isAssessment == 1),\\n                    statusCode = anyif(statusCode, isAssessment == 1),\\n                    maturityLevel = anyif(maturityLevel, isAssessment == 1),\\n                    severity = anyif(severity, isAssessment == 1),\\n                    severityNumber = anyif(severityNumber, isAssessment == 1),\\n                    environment = anyif(environment, isAssessment == 1),\\n                    isUnhealthy = anyif(isUnhealthy, isAssessment == 1),\\n                    typeFullPath = anyif(typeFullPath, isAssessment == 1),\\n                    dueDate = anyif(dueDate, isAssignment == 1),\\n                    eta = anyif(eta, isAssignment == 1),\\n                    isGracePeriod = anyif(isGracePeriod, isAssignment == 1),\\n                    govCompletionStatus = anyif(govCompletionStatus, isAssignment == 1),\\n                    hasAssignment = max(isAssignment),\\n                    hasAssessmentData = sum(isAssessment) by idForSummarize\\n        | where hasAssessmentData > 0\\n        | mv-expand statusPerInitiative limit 400\\n        | extend policyInitiativeName = tostring(statusPerInitiative.policyInitiativeName)\\n        // Modification: only show recommendations for selected policy set\\n        | extend policyInitiativeId= tostring(statusPerInitiative.policyInitiativeId)\\n        | where policyInitiativeId =~ split('{_policy_set_definition_id}', '/')[-1]\\n        // End modification\\n        | extend now = now()\\n        | extend completionStatus = case(\\n            isUnhealthy == 0, \\\"Completed\\\", \\n            govCompletionStatus == \\\"Overdue\\\", \\\"Overdue\\\",\\n            govCompletionStatus == \\\"OnTime\\\", \\\"OnTime\\\",\\n            \\\"Unassigned\\\")\\n        //| where ((completionStatus =~ \\\"Unassigned\\\"))\\n        | extend completionStatusNumber = case(\\n            completionStatus == \\\"Completed\\\", 0,\\n            completionStatus in (\\\"Unassigned\\\", \\\"Unhealthy\\\"), 1,\\n            completionStatus == \\\"OnTime\\\", 2,\\n            completionStatus == \\\"Overdue\\\", 3,\\n            -1)\\n        | summarize initiatives = make_set_if(policyInitiativeName, isnotempty(policyInitiativeName)),\\n                    //source = any(source),\\n                    assessmentKey = any(assessmentKey),\\n                    displayName = any(displayName),\\n                    statusCode = any(statusCode),\\n                    maturityLevel = any(maturityLevel),\\n                    severity = any(severity),\\n                    severityNumber = any(severityNumber),\\n                    environment = any(environment),\\n                    dueDate = any(dueDate),\\n                    eta = any(eta),\\n                    isGracePeriod = any(isGracePeriod),\\n                    typeFullPath = any(typeFullPath),\\n                    completionStatus = any(completionStatus),\\n                    completionStatusNumber = any(completionStatusNumber) by idForSummarize\\n        | summarize resourceCount = count(),\\n                    environments = make_set(environment),\\n                    displayName = any(displayName),\\n                    maturityLevel = any(maturityLevel),\\n                    initiatives = make_set(initiatives),\\n                    resourceTypes = make_set(typeFullPath),\\n                    severity = any(severity),\\n                    severityNumber = any(severityNumber),\\n                    dueDate = min(dueDate),\\n                    eta = min(eta),\\n                    isGracePeriod = iff(sum(isGracePeriod) > 0, 1, 0),\\n                    completionStatusNumber = max(completionStatusNumber) by assessmentKey, statusCode\\n        | extend statusAndCount = pack(\\\"statusCode\\\", statusCode, \\\"resourceCount\\\", resourceCount)\\n        | summarize statusAndCount = make_list(statusAndCount),\\n                    resourceCount = sum(resourceCount),\\n                    environments = make_set(environments),\\n                    displayName = any(displayName),\\n                    maturityLevel = any(maturityLevel),\\n                    initiatives = make_set(initiatives),\\n                    severity = any(severity),\\n                    severityNumber = any(severityNumber),\\n                    dueDate = min(dueDate),\\n                    eta = min(eta),\\n                    isGracePeriod = iff(sum(isGracePeriod) > 0, 1, 0),\\n                    resourceTypes = make_set(resourceTypes),\\n                    completionStatusNumber = max(completionStatusNumber) by assessmentKey\\n        | extend completionStatus = case(\\n            completionStatusNumber == 0, \\\"Completed\\\",\\n            completionStatusNumber == 1, \\\"Unassigned\\\",\\n            completionStatusNumber == 2, \\\"OnTime\\\",\\n            completionStatusNumber == 3, \\\"Overdue\\\",\\n            \\\"Unknown\\\")\\n        | order by severityNumber desc\\n            | extend controlsData = dynamic([])\\n            | order by severityNumber desc\\n| where severity == \\\"Low\\\"\\n| summarize count() by severity, completionStatus\",\"size\":4,\"title\":\"Low Severity\",\"noDataMessage\":\"No recommendations where found with severity Low\",\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"crossComponentResources\":[\"value::tenant\"],\"visualization\":\"piechart\",\"chartSettings\":{\"yAxis\":[\"count_\"],\"group\":\"completionStatus\",\"createOtherGroup\":null,\"seriesLabelSettings\":[{\"seriesName\":\"Unassigned\",\"color\":\"redBright\"},{\"seriesName\":\"Completed\",\"color\":\"green\"}]}},\"customWidth\":\"33\",\"name\":\"query - low_severity_security_recommendations\"},{\"type\":1,\"content\":{\"json\":\"\"},\"name\":\"text - 10\"}]},\"conditionalVisibility\":{\"parameterName\":\"_selected_tab\",\"comparison\":\"isEqualTo\",\"value\":\"overview\"},\"name\":\"group - overview\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"7227f2da-40b7-4744-9569-7c2e2656c168\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"_controls\",\"label\":\"Controls\",\"type\":2,\"description\":\"Only shows controls that have a policy attached with targeted resources. (list can differ per environment)\",\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"policyresources \\n | where type =~ 'Microsoft.PolicyInsights/PolicyStates'\\n | extend policy_assignment_id = tolower(tostring(properties.policyAssignmentId)) \\n | where policy_assignment_id == '{_assignment}' // selector\\n | extend policy_definition_group_names = iff(isnotnull(properties.policyDefinitionGroupNames), properties.policyDefinitionGroupNames, dynamic(['']))\\n | mv-expand policy_definition_group_names\\n | extend policy_definition_group_name = tolower(tostring(policy_definition_group_names))\\n | distinct policy_definition_group_name\\n | order by policy_definition_group_name asc\",\"crossComponentResources\":[\"value::tenant\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"defaultValue\":\"value::all\",\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"value\":[\"value::all\"]},{\"id\":\"9f1e6dfb-3335-4baa-9f6f-3cddf6ebc79e\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"_resource_compliance\",\"label\":\"Resource Compliance\",\"type\":2,\"description\":\"Filter resources by compliance state. By default compliant resources are filtered out.\",\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"jsonData\":\"[\\n {\\n \\\"value\\\": \\\"compliant\\\",\\n \\\"selected\\\": false\\n },\\n {\\n \\\"value\\\": \\\"noncompliant\\\",\\n \\\"selected\\\": true \\n },\\n {\\n \\\"value\\\": \\\"exempt\\\",\\n \\\"selected\\\": true \\n },\\n {\\n \\\"value\\\": \\\"error\\\",\\n \\\"selected\\\": true \\n },\\n {\\n \\\"value\\\": \\\"conflict\\\",\\n \\\"selected\\\": true \\n },\\n {\\n \\\"value\\\": \\\"protected\\\",\\n \\\"selected\\\": true \\n },\\n {\\n \\\"value\\\": \\\"unknown\\\",\\n \\\"selected\\\": true \\n },\\n {\\n \\\"value\\\": \\\"notapplicable\\\",\\n \\\"selected\\\": true \\n }\\n]\\n\\n\\n\\n\\n\",\"timeContext\":{\"durationMs\":86400000},\"value\":[\"exempt\",\"error\",\"conflict\",\"protected\",\"unknown\",\"notapplicable\",\"noncompliant\"]}],\"style\":\"above\",\"queryType\":0,\"resourceType\":\"microsoft.resources/tenants\"},\"name\":\"parameters - 0\",\"styleSettings\":{\"margin\":\"0px\",\"padding\":\"0px\"}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"// resource details\\npolicyresources \\n| where type =~ 'Microsoft.PolicyInsights/PolicyStates'\\n| extend subscription_id = tolower(tostring(properties.subscriptionId)) \\n| extend policy_assignment_id = tolower(tostring(properties.policyAssignmentId)) \\n| where policy_assignment_id == '{_assignment}' // selector\\n| where subscription_id in~ ({_subscriptions:subid}) // selector\\n| extend resource_id = tolower(tostring(properties.resourceId))\\n| extend resource_type = tolower(tostring(properties.resourceType))\\n| extend resource_group = tolower(tostring(properties.resourceGroup))\\n| extend last_updated = tostring(properties.timestamp)\\n| extend state_weight = toint(properties.stateWeight)\\n| extend policy_set_definition_id = tolower(tolower(properties.policySetDefinitionId))\\n| extend policy_definition_id = tolower(tolower(properties.policyDefinitionId))\\n| extend policy_definition_name = tolower(tolower(properties.policyDefinitionName))\\n| extend policy_definition_group_names = iff(isnotnull(properties.policyDefinitionGroupNames), properties.policyDefinitionGroupNames, dynamic(['']))\\n| mv-expand policy_definition_group_names limit 2000\\n| extend policy_definition_group_name = tolower(tostring(policy_definition_group_names))\\n| extend id = strcat(policy_definition_group_name,policy_definition_id, resource_id)\\n| extend parent_id = strcat(policy_definition_group_name, policy_definition_id)\\n| summarize state_weight=max(state_weight) by policy_definition_group_name,id, parent_id, name = resource_id, policy_assignment_id, policy_set_definition_id, policy_definition_id, resource_type, subscription_id, resource_group, last_updated, resource_id\\n| extend compliance_state = case (\\n state_weight == 300, 'noncompliant',\\n state_weight == 200, 'compliant',\\n state_weight == 150, 'error',\\n state_weight == 100, 'conflict',\\n state_weight == 75, 'protected',\\n state_weight == 50, 'exempt',\\n state_weight == 10, 'unknown',\\n state_weight == 0,'notapplicable', \\n 'notapplicable'\\n)\\n| project id, parent_id, name,compliance_state, last_updated, policy_assignment_id, policy_set_definition_id, policy_definition_id, resource_type, subscription_id, resource_group, policy_definition_group_name, resource_id\\n| order by name\\n| extend category='resource'\\n| extend action = 'Create Exempt'\\n| where compliance_state in ({_resource_compliance}) // selector\\n| where policy_definition_group_name in ({_controls}) // selector\\n// policy definition details\\n| union ( \\n policyresources \\n | where type =~ 'Microsoft.PolicyInsights/PolicyStates'\\n | extend subscription_id = tolower(tostring(properties.subscriptionId)) \\n | extend policy_assignment_id = tolower(tostring(properties.policyAssignmentId)) \\n | where policy_assignment_id == '{_assignment}' // selector\\n | where subscription_id in~ ({_subscriptions:subid}) // selector\\n | extend resource_id = tolower(tostring(properties.resourceId))\\n | extend policy_set_definition_id = tolower(tolower(properties.policySetDefinitionId))\\n | extend state_weight = toint(properties.stateWeight)\\n | extend policy_definition_id = tolower(tolower(properties.policyDefinitionId))\\n | join kind=leftouter \\n (\\n policyresources \\n | where type =~ 'Microsoft.Authorization/PolicyDefinitions'\\n | extend policy_definition_id = tolower(id)\\n | extend policy_definition_display_name=tostring(properties.displayName)\\n | project policy_definition_id, policy_definition_display_name\\n ) on policy_definition_id\\n | extend policy_definition_group_names = iff(isnotnull(properties.policyDefinitionGroupNames), properties.policyDefinitionGroupNames, dynamic(['']))\\n | mv-expand policy_definition_group_names limit 2000\\n | extend policy_definition_group_name = tolower(tostring(policy_definition_group_names))\\n | extend id = strcat(policy_definition_group_name, policy_definition_id)\\n | extend parent_id = strcat(policy_definition_group_name)\\n | summarize state_weight=max(state_weight) by name = policy_definition_display_name, policy_definition_group_name, parent_id, id, policy_definition_id, policy_set_definition_id, policy_assignment_id\\n | extend compliance_state = case (\\n state_weight == 300, 'noncompliant',\\n state_weight == 200, 'compliant',\\n state_weight == 150, 'error',\\n state_weight == 100, 'conflict',\\n state_weight == 75, 'protected',\\n state_weight == 50, 'exempt',\\n state_weight == 10, 'unknown',\\n state_weight == 0,'notapplicable', \\n 'notapplicable'\\n )\\n | extend category='policy'\\n // clenaup | extend action = 'View Assessment'\\n | where policy_definition_group_name in ({_controls}) // selector\\n)\\n// policy group details\\n| union (\\n policyresources \\n | where type =~ 'Microsoft.PolicyInsights/PolicyStates'\\n | extend subscription_id = tolower(tostring(properties.subscriptionId)) \\n | extend policy_assignment_id = tolower(tostring(properties.policyAssignmentId)) \\n | where policy_assignment_id == '{_assignment}' // selector\\n | where subscription_id in~ ({_subscriptions:subid}) // selector\\n | extend resource_id = tolower(tostring(properties.resourceId))\\n | extend state_weight = toint(properties.stateWeight)\\n | extend policy_definition_id = tolower(tolower(properties.policyDefinitionId))\\n | extend policy_set_definition_id = tolower(tolower(properties.policySetDefinitionId))\\n | extend policy_definition_group_names = iff(isnotnull(properties.policyDefinitionGroupNames), properties.policyDefinitionGroupNames, dynamic(['']))\\n | mv-expand policy_definition_group_names limit 2000\\n | extend policy_definition_group_name = tolower(tostring(policy_definition_group_names))\\n | extend id = policy_definition_group_name\\n | extend parent_id = ''\\n | summarize state_weight=max(state_weight) by name = policy_definition_group_name, policy_definition_group_name, parent_id, id, policy_set_definition_id, policy_assignment_id\\n | extend compliance_state = case (\\n state_weight == 300, 'noncompliant',\\n state_weight == 200, 'compliant',\\n state_weight == 150, 'error',\\n state_weight == 100, 'conflict',\\n state_weight == 75, 'protected',\\n state_weight == 50, 'exempt',\\n state_weight == 10, 'unknown',\\n state_weight == 0,'notapplicable', \\n 'notapplicable'\\n )\\n | extend category='group'\\n | where policy_definition_group_name in ({_controls}) // selector\\n)\\n// lookup policy severity and assessment_key from security recommendations. should be joined on policy definition level but prevented by max join limitation\\n// therefor implemented afters unions and severity and assessment_key are cleared out on group level\\n | join kind=leftouter\\n    (\\n    securityresources\\n    | where type =~ \\\"microsoft.security/assessments\\\" or type =~ \\\"microsoft.security/assessments/governanceassignments\\\"\\n    | extend policy_definition_id=tolower(tostring(properties.metadata.policyDefinitionId))\\n    | extend severity=tostring(properties.metadata.severity)\\n    | extend assessment_key = name\\n    | summarize  severity=any(severity), assessment_key=any(assessment_key) by  policy_definition_id\\n    ) on policy_definition_id\\n| extend severity = iff(isempty(severity), 'Unknown', severity)\\n| extend severity = iff(category == 'group', '', severity)\\n| project name, compliance_state, severity, action, assessment_key, last_updated, resource_type, subscription_id,  parent_id, id, category, policy_definition_id, policy_set_definition_id, policy_definition_group_name, resource_id\\n\\n\",\"size\":0,\"title\":\"Compliance\",\"showRefreshButton\":true,\"exportedParameters\":[{\"fieldName\":\"resource_id\",\"parameterName\":\"_selected_resource_id\",\"parameterType\":1},{\"fieldName\":\"category\",\"parameterName\":\"_selected_category\",\"parameterType\":1},{\"fieldName\":\"compliance_state\",\"parameterName\":\"_selected_compliance_state\",\"parameterType\":1},{\"fieldName\":\"policy_definition_id\",\"parameterName\":\"_selected_policy_definition_id\",\"parameterType\":1},{\"fieldName\":\"policy_set_definition_id\",\"parameterName\":\"_selected_policy_set_definition_id\",\"parameterType\":1},{\"fieldName\":\"policy_definition_group_name\",\"parameterName\":\"_selected_policy_definition_group_name\",\"parameterType\":1},{\"parameterName\":\"_selected_row\",\"parameterType\":1}],\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"crossComponentResources\":[\"value::tenant\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"name\",\"formatter\":13,\"formatOptions\":{\"linkTarget\":\"Resource\",\"showIcon\":true,\"customColumnWidthSetting\":\"80ch\"}},{\"columnMatch\":\"compliance_state\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"compliant\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"noncompliant\",\"representation\":\"4\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"exempt\",\"representation\":\"stopped\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"unknown\",\"text\":\"{0}{1}\"}],\"customColumnWidthSetting\":\"20ch\"}},{\"columnMatch\":\"severity\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"High\",\"representation\":\"Sev0\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Medium\",\"representation\":\"Sev1\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Low\",\"representation\":\"Sev2\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Unknown\",\"representation\":\"Sev3\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"Ellipsis\",\"text\":\"{0}{1}\"}],\"customColumnWidthSetting\":\"15ch\"}},{\"columnMatch\":\"action\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"OpenBlade\",\"linkIsContextBlade\":false,\"bladeOpenContext\":{\"bladeName\":\"CreateExemptionBlade\",\"extensionName\":\"Microsoft_Azure_Policy\",\"bladeParameters\":[{\"name\":\"assignmentId\",\"source\":\"static\",\"value\":\"{_assignment}\"},{\"name\":\"exemptionScope\",\"source\":\"column\",\"value\":\"resource_id\"},{\"name\":\"definitionReferenceIds~\",\"source\":\"static\",\"value\":\"null\"},{\"name\":\"returnJsData~\",\"source\":\"static\",\"value\":\"false\"}]}}},{\"columnMatch\":\"assessment_key\",\"formatter\":5},{\"columnMatch\":\"resource_type\",\"formatter\":16,\"formatOptions\":{\"showIcon\":true,\"customColumnWidthSetting\":\"25ch\"}},{\"columnMatch\":\"subscription_id\",\"formatter\":15,\"formatOptions\":{\"linkTarget\":null,\"showIcon\":true,\"customColumnWidthSetting\":\"25ch\"}},{\"columnMatch\":\"parent_id\",\"formatter\":5},{\"columnMatch\":\"id\",\"formatter\":5},{\"columnMatch\":\"category\",\"formatter\":5},{\"columnMatch\":\"policy_definition_id\",\"formatter\":5},{\"columnMatch\":\"policy_set_definition_id\",\"formatter\":5},{\"columnMatch\":\"policy_definition_group_name\",\"formatter\":5},{\"columnMatch\":\"subscriptions_scope\",\"formatter\":5},{\"columnMatch\":\"policy_assignment_id\",\"formatter\":5},{\"columnMatch\":\"resource_group\",\"formatter\":5},{\"columnMatch\":\"state_weight\",\"formatter\":5}],\"rowLimit\":10000,\"hierarchySettings\":{\"idColumn\":\"id\",\"parentColumn\":\"parent_id\",\"treeType\":0,\"expanderColumn\":\"name\"},\"labelSettings\":[{\"columnId\":\"name\",\"label\":\"Name\"},{\"columnId\":\"compliance_state\",\"label\":\"State\"},{\"columnId\":\"severity\",\"label\":\"Severity\"},{\"columnId\":\"action\",\"label\":\"Action\"},{\"columnId\":\"last_updated\",\"label\":\"Last Updated\"},{\"columnId\":\"resource_type\",\"label\":\"Resource Type\"},{\"columnId\":\"subscription_id\",\"label\":\"Subscription\"}]}},\"name\":\"query - by_control\",\"styleSettings\":{\"margin\":\"0px\",\"padding\":\"0px\",\"showBorder\":true}},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"{\\\"version\\\":\\\"ARMEndpoint/1.0\\\",\\\"data\\\":null,\\\"headers\\\":[],\\\"method\\\":\\\"GET\\\",\\\"path\\\":\\\"{_selected_resource_id}/providers/Microsoft.Authorization/policyExemptions?api-version=2022-07-01-preview\\\",\\\"urlParams\\\":[{\\\"key\\\":\\\"$filter\\\",\\\"value\\\":\\\"policyAssignmentId eq '{_assignment}'\\\"},{\\\"key\\\":\\\"\\\",\\\"value\\\":\\\"\\\"}],\\\"batchDisabled\\\":false,\\\"transformers\\\":[{\\\"type\\\":\\\"jsonpath\\\",\\\"settings\\\":{\\\"tablePath\\\":\\\"$.value\\\",\\\"columns\\\":[{\\\"path\\\":\\\"id\\\",\\\"columnid\\\":\\\"exemption_id\\\"},{\\\"path\\\":\\\"properties.exemptionCategory\\\",\\\"columnid\\\":\\\"category\\\"},{\\\"path\\\":\\\"properties.displayName\\\",\\\"columnid\\\":\\\"display_name\\\"},{\\\"path\\\":\\\"properties.description\\\",\\\"columnid\\\":\\\"description\\\"},{\\\"path\\\":\\\"$.id\\\",\\\"columnid\\\":\\\"scope\\\",\\\"columnType\\\":\\\"string\\\",\\\"substringRegexMatch\\\":\\\"^(.*)(/providers/.+)$\\\",\\\"substringReplace\\\":\\\"$1\\\"},{\\\"path\\\":\\\"systemData.lastModifiedAt\\\",\\\"columnid\\\":\\\"last_modified\\\"},{\\\"path\\\":\\\"properties.policyAssignmentId\\\",\\\"columnid\\\":\\\"assignment_id\\\"},{\\\"path\\\":\\\"$\\\",\\\"columnid\\\":\\\"details\\\"}]}}]}\",\"size\":4,\"title\":\"Exemptions (Shows all exemptions for the selected policy assignment applicable to the subscription of the selected resource)\",\"queryType\":12,\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"exemption_id\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"OpenBlade\",\"linkLabel\":\"Edit\",\"bladeOpenContext\":{\"bladeName\":\"EditExemptionBlade\",\"extensionName\":\"Microsoft_Azure_Policy\",\"bladeParameters\":[{\"name\":\"exemptionId\",\"source\":\"column\",\"value\":\"exemption_id\"},{\"name\":\"assignmentId\",\"source\":\"column\",\"value\":\"assignment_id\"}]},\"customColumnWidthSetting\":\"12ch\"}},{\"columnMatch\":\"display_name\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"55ch\"}},{\"columnMatch\":\"description\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkLabel\":\"\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"55ch\"}},{\"columnMatch\":\"scope\",\"formatter\":13,\"formatOptions\":{\"linkTarget\":\"Resource\",\"showIcon\":true,\"customColumnWidthSetting\":\"30ch\"}},{\"columnMatch\":\"last_modified\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"23ch\"}},{\"columnMatch\":\"assignment_id\",\"formatter\":5},{\"columnMatch\":\"details\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkLabel\":\"Details\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"13ch\"}},{\"columnMatch\":\"id\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"50ch\"}},{\"columnMatch\":\"system_data\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkLabel\":\"System Data\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"16ch\"}},{\"columnMatch\":\"properties\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkLabel\":\"Properties\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"15ch\"}},{\"columnMatch\":\"last_modified_by\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"35ch\"}}],\"labelSettings\":[{\"columnId\":\"exemption_id\",\"label\":\"Action\"},{\"columnId\":\"category\",\"label\":\"Category\"},{\"columnId\":\"display_name\",\"label\":\"Display Name\"},{\"columnId\":\"description\",\"label\":\"Description\"},{\"columnId\":\"scope\",\"label\":\"Scope\"},{\"columnId\":\"last_modified\",\"label\":\"Last Modified\"},{\"columnId\":\"details\",\"label\":\"Details\"}]}},\"conditionalVisibilities\":[{\"parameterName\":\"_selected_compliance_state\",\"comparison\":\"isEqualTo\",\"value\":\"exempt\"},{\"parameterName\":\"_selected_resource_id\",\"comparison\":\"isNotEqualTo\"}],\"name\":\"query - resource_exempts\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"resources\\n| where id =~ '{_selected_resource_id}'\\n| union (\\n    resourcecontainers\\n    | where id =~ '{_selected_resource_id}'\\n)\\n| extend details = pack_all()\\n| extend resource_info = pack (\\n    \\\"Display Name\\\", name,\\n    \\\"Type\\\", type,\\n    \\\"Tags\\\", tags,\\n    \\\"All Properties\\\", properties\\n)\\n| mv-expand resource_info\\n| extend prop=bag_keys(resource_info)\\n| project Property = prop[0], Value = resource_info[tostring(prop[0])]\",\"size\":1,\"title\":\"Resource\",\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"crossComponentResources\":[\"value::tenant\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Property\",\"formatter\":1},{\"columnMatch\":\"Value\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"150ch\"}}]}},\"conditionalVisibilities\":[{\"parameterName\":\"_selected_category\",\"comparison\":\"isNotEqualTo\",\"value\":\"group\"},{\"parameterName\":\"_selected_resource_id\",\"comparison\":\"isNotEqualTo\"}],\"name\":\"query - resource_details\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"policyresources\\n| where type == \\\"microsoft.authorization/policydefinitions\\\"\\n| where id =~ '{_selected_policy_definition_id}'\\n| extend policy_info = pack\\n    (\\n    \\\"Display Name\\\" , tostring(properties.displayName), \\n    \\\"Version\\\", tostring(properties.metadata.version),\\n    \\\"Description\\\", tostring(properties.description),\\n    \\\"All Properties\\\", properties\\n    )\\n| mv-expand policy_info\\n| extend prop=bag_keys(policy_info)\\n| project Property = prop[0], Value = policy_info[tostring(prop[0])]\",\"size\":1,\"title\":\"Policy\",\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"crossComponentResources\":[\"value::tenant\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Property\",\"formatter\":1,\"formatOptions\":{\"customColumnWidthSetting\":\"15ch\"}},{\"columnMatch\":\"Value\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"170ch\"}}]}},\"conditionalVisibilities\":[{\"parameterName\":\"_selected_policy_definition_id\",\"comparison\":\"isNotEqualTo\"},{\"parameterName\":\"_selected_category\",\"comparison\":\"isNotEqualTo\",\"value\":\"group\"}],\"name\":\"query - policy_definition_details\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"policyresources\\n| where type == \\\"microsoft.authorization/policysetdefinitions\\\"\\n| where id =~ '{_selected_policy_set_definition_id}'\\n| extend initiative_name = tostring(properties.displayName)\\n| extend initiative_version = tostring(properties.metadata.version)\\n| mv-expand policy_definition_group = todynamic(properties.policyDefinitionGroups) limit 2000\\n| extend policy_definition_group_name = tolower(tostring(policy_definition_group.name))\\n| extend policy_definition_group_display_name = tostring(policy_definition_group.displayName)\\n| extend policy_definition_group_description = tostring(policy_definition_group.description)\\n| where policy_definition_group_name == '{_selected_policy_definition_group_name}'\\n| extend control_info=pack(\\n \\\"Name\\\" , policy_definition_group_name, \\n \\\"Display Name\\\", policy_definition_group_display_name, \\n \\\"Description\\\", policy_definition_group_description)\\n| mv-expand control_info\\n| extend prop=bag_keys(control_info)\\n| project Property = prop[0], Value = control_info[tostring(prop[0])]\",\"size\":1,\"title\":\"Control\",\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"crossComponentResources\":[\"value::tenant\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Property\",\"formatter\":1,\"formatOptions\":{\"customColumnWidthSetting\":\"15ch\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"}}},{\"columnMatch\":\"Value\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"170ch\"}}]}},\"conditionalVisibility\":{\"parameterName\":\"_selected_category\",\"comparison\":\"isEqualTo\",\"value\":\"group\"},\"name\":\"query - control_info\",\"styleSettings\":{\"showBorder\":true}}]},\"name\":\"group - by_control - details\"},{\"type\":1,\"content\":{\"json\":\"**Details** (select a row to view additional information)\"},\"name\":\"text - 3\"}]},\"conditionalVisibility\":{\"parameterName\":\"_selected_tab\",\"comparison\":\"isEqualTo\",\"value\":\"by_control\"},\"name\":\"group - by_control\",\"styleSettings\":{\"margin\":\"0px\"}},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"crossComponentResources\":[\"value::tenant\"],\"parameters\":[{\"id\":\"0ec81cee-ea39-4fab-86ec-19fe49e437e8\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"_policy_category\",\"label\":\"Policy Category\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"policyresources \\n| where type =~ 'Microsoft.PolicyInsights/PolicyStates'\\n| extend policy_assignment_id = tolower(tostring(properties.policyAssignmentId)) \\n| where policy_assignment_id == '{_assignment}' // selector\\n| extend policy_definition_id = tolower(tolower(properties.policyDefinitionId))\\n| distinct policy_definition_id\\n | join kind=leftouter \\n (\\n policyresources \\n | where type =~ 'Microsoft.Authorization/PolicyDefinitions'\\n | extend policy_definition_id = tolower(id)\\n | extend policy_definition_category=tostring(properties.metadata.category)\\n | project policy_definition_id, policy_definition_category\\n ) on policy_definition_id\\n| distinct policy_definition_category\\n| order by policy_definition_category asc\",\"crossComponentResources\":[\"value::tenant\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"defaultValue\":\"value::all\",\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"value\":[\"value::all\"]},{\"id\":\"ace9a84e-5e18-4932-9f99-6b2e63625e1d\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"_policy_definitions\",\"label\":\"Policy Definitions\",\"type\":2,\"description\":\"Only shows controls that have a policy attached with targeted resources. (list can differ per environment)\",\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"policyresources \\n| where type =~ 'Microsoft.PolicyInsights/PolicyStates'\\n| extend policy_assignment_id = tolower(tostring(properties.policyAssignmentId)) \\n| where policy_assignment_id == '{_assignment}' // selector\\n| extend policy_definition_id = tolower(tolower(properties.policyDefinitionId))\\n| distinct policy_definition_id\\n | join kind = leftouter \\n (\\n policyresources \\n | where type =~ 'Microsoft.Authorization/PolicyDefinitions'\\n | extend policy_definition_id = tolower(id)\\n | extend policy_definition_display_name = tostring(properties.displayName)\\n | extend policy_definition_category = tostring(properties.metadata.category)\\n | summarize by policy_definition_id, policy_definition_display_name, policy_definition_category\\n ) on policy_definition_id\\n| where policy_definition_category in ({_policy_category})\\n| project policy_definition_id, policy_definition_display_name\\n| order by policy_definition_display_name asc\\n\",\"crossComponentResources\":[\"value::tenant\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"defaultValue\":\"value::all\",\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"value\":[\"value::all\"]},{\"id\":\"14ba385c-1cdb-4711-90b2-7f04bcd94670\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"_resource_compliance\",\"label\":\"Resource Compliance\",\"type\":2,\"description\":\"Filter resources by compliance state. By default compliant resources are filtered out.\",\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"jsonData\":\"[\\n {\\n \\\"value\\\": \\\"compliant\\\",\\n \\\"selected\\\": false\\n },\\n {\\n \\\"value\\\": \\\"noncompliant\\\",\\n \\\"selected\\\": true \\n },\\n {\\n \\\"value\\\": \\\"exempt\\\",\\n \\\"selected\\\": true \\n },\\n {\\n \\\"value\\\": \\\"error\\\",\\n \\\"selected\\\": true \\n },\\n {\\n \\\"value\\\": \\\"conflict\\\",\\n \\\"selected\\\": true \\n },\\n {\\n \\\"value\\\": \\\"protected\\\",\\n \\\"selected\\\": true \\n },\\n {\\n \\\"value\\\": \\\"unknown\\\",\\n \\\"selected\\\": true \\n },\\n {\\n \\\"value\\\": \\\"notapplicable\\\",\\n \\\"selected\\\": true \\n }\\n]\\n\\n\\n\\n\\n\",\"timeContext\":{\"durationMs\":86400000},\"value\":[\"exempt\",\"error\",\"conflict\",\"protected\",\"unknown\",\"notapplicable\",\"noncompliant\"]}],\"style\":\"above\",\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\"},\"name\":\"parameters - 0 - Copy\",\"styleSettings\":{\"margin\":\"0px\",\"padding\":\"0px\"}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"// resource details\\npolicyresources \\n| where type =~ 'Microsoft.PolicyInsights/PolicyStates'\\n| extend subscription_id = tolower(tostring(properties.subscriptionId)) \\n| extend policy_assignment_id = tolower(tostring(properties.policyAssignmentId)) \\n| where policy_assignment_id == '{_assignment}' // selector\\n| where subscription_id in~ ({_subscriptions:subid}) // selector\\n| extend resource_id = tolower(tostring(properties.resourceId))\\n| extend resource_type = tolower(tostring(properties.resourceType))\\n| extend resource_group = tolower(tostring(properties.resourceGroup))\\n| extend last_updated = tostring(properties.timestamp)\\n| extend state_weight = toint(properties.stateWeight)\\n| extend policy_set_definition_id = tolower(tolower(properties.policySetDefinitionId))\\n| extend policy_definition_id = tolower(tolower(properties.policyDefinitionId))\\n| extend policy_definition_name = tolower(tolower(properties.policyDefinitionName))\\n | join kind=leftouter \\n    (\\n    policyresources \\n    | where type =~ 'Microsoft.Authorization/PolicyDefinitions'\\n    | extend policy_definition_id = tolower(id)\\n    | extend policy_definition_display_name=tostring(properties.displayName)\\n    | project policy_definition_id, policy_definition_display_name\\n    ) on policy_definition_id\\n| extend id = strcat(policy_definition_id, resource_id)\\n| extend parent_id = strcat(policy_definition_id)\\n| summarize state_weight=max(state_weight) by id, parent_id, name = resource_id, policy_assignment_id, policy_definition_display_name, policy_set_definition_id, policy_definition_id, resource_type, subscription_id, resource_group, resource_id, last_updated\\n| extend compliance_state = case (\\n state_weight == 300, 'noncompliant',\\n state_weight == 200, 'compliant',\\n state_weight == 150, 'error',\\n state_weight == 100, 'conflict',\\n state_weight == 75, 'protected',\\n state_weight == 50, 'exempt',\\n state_weight == 10, 'unknown',\\n state_weight == 0,'notapplicable', \\n 'notapplicable'\\n)\\n| project id, parent_id, name,compliance_state, last_updated, policy_definition_display_name, policy_assignment_id, policy_set_definition_id, policy_definition_id, resource_type, subscription_id, resource_group, resource_id\\n| order by name\\n| extend category = 'resource'\\n| extend action = 'Create Exempt'\\n| where compliance_state in ({_resource_compliance}) // selector\\n| where policy_definition_id in ({_policy_definitions}) // selector\\n// policy definition details\\n| union ( \\n policyresources \\n | where type =~ 'Microsoft.PolicyInsights/PolicyStates'\\n | extend subscription_id = tolower(tostring(properties.subscriptionId)) \\n | extend policy_assignment_id = tolower(tostring(properties.policyAssignmentId)) \\n | where policy_assignment_id == '{_assignment}' // selector\\n | where subscription_id in~ ({_subscriptions:subid}) // selector\\n | extend resource_id = tolower(tostring(properties.resourceId))\\n | extend policy_set_definition_id = tolower(tolower(properties.policySetDefinitionId))\\n | extend state_weight = toint(properties.stateWeight)\\n | extend policy_definition_id = tolower(tolower(properties.policyDefinitionId))\\n | join kind=leftouter \\n (\\n policyresources \\n | where type =~ 'Microsoft.Authorization/PolicyDefinitions'\\n | extend policy_definition_id = tolower(id)\\n | extend policy_definition_display_name=tostring(properties.displayName)\\n | project policy_definition_id, policy_definition_display_name\\n ) on policy_definition_id\\n | extend id = strcat(policy_definition_id)\\n | extend parent_id = ''\\n | summarize state_weight=max(state_weight) by name = policy_definition_display_name, parent_id, id, policy_definition_id, policy_set_definition_id, policy_assignment_id\\n | extend compliance_state = case (\\n state_weight == 300, 'noncompliant',\\n state_weight == 200, 'compliant',\\n state_weight == 150, 'error',\\n state_weight == 100, 'conflict',\\n state_weight == 75, 'protected',\\n state_weight == 50, 'exempt',\\n state_weight == 10, 'unknown',\\n state_weight == 0,'notapplicable', \\n 'notapplicable'\\n )\\n | extend category='policy'\\n | where policy_definition_id in ({_policy_definitions}) // selector\\n | order by name asc \\n)\\n// lookup policy severity from securirty recommendations \\n | join kind=leftouter\\n    (\\n    securityresources\\n    | where type =~ \\\"microsoft.security/assessments\\\" or type =~ \\\"microsoft.security/assessments/governanceassignments\\\"\\n    | extend policy_definition_id=tolower(tostring(properties.metadata.policyDefinitionId))\\n    | extend severity=tostring(properties.metadata.severity)\\n    | summarize  severity=any(severity) by  policy_definition_id\\n    ) on policy_definition_id\\n| extend severity = iff(isempty(severity), 'Unknown', severity)\\n| project name, compliance_state, severity, action, last_updated, resource_type, subscription_id,  parent_id, id, category, policy_definition_id, resource_id\\n\",\"size\":0,\"title\":\"Compliance\",\"showRefreshButton\":true,\"exportedParameters\":[{\"fieldName\":\"compliance_state\",\"parameterName\":\"_selected_compliance_state\",\"parameterType\":1},{\"fieldName\":\"category\",\"parameterName\":\"_selected_category\",\"parameterType\":1},{\"fieldName\":\"resource_id\",\"parameterName\":\"_selected_resource_id\",\"parameterType\":1},{\"fieldName\":\"policy_definition_id\",\"parameterName\":\"_selected_policy_definition_id\",\"parameterType\":1}],\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"crossComponentResources\":[\"value::tenant\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"name\",\"formatter\":13,\"formatOptions\":{\"linkTarget\":\"Resource\",\"linkIsContextBlade\":false,\"showIcon\":true,\"customColumnWidthSetting\":\"80ch\"}},{\"columnMatch\":\"compliance_state\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"compliant\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"noncompliant\",\"representation\":\"4\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"exempt\",\"representation\":\"stopped\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"unknown\",\"text\":\"{0}{1}\"}],\"customColumnWidthSetting\":\"20ch\"}},{\"columnMatch\":\"severity\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"High\",\"representation\":\"Sev0\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Medium\",\"representation\":\"Sev1\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Low\",\"representation\":\"Sev2\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Unknown\",\"representation\":\"Sev3\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"Subtract\",\"text\":\"{0}{1}\"}],\"customColumnWidthSetting\":\"15ch\"}},{\"columnMatch\":\"action\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"OpenBlade\",\"bladeOpenContext\":{\"bladeName\":\"CreateExemptionBlade\",\"extensionName\":\"Microsoft_Azure_Policy\",\"bladeParameters\":[{\"name\":\"assignmentId\",\"source\":\"static\",\"value\":\"{_assignment}\"},{\"name\":\"exemptionScope\",\"source\":\"column\",\"value\":\"resource_id\"},{\"name\":\"definitionReferenceIds~\",\"source\":\"static\",\"value\":\"null\"},{\"name\":\"returnJsData~\",\"source\":\"static\",\"value\":\"false\"}]}}},{\"columnMatch\":\"resource_type\",\"formatter\":16,\"formatOptions\":{\"showIcon\":true,\"customColumnWidthSetting\":\"25ch\"}},{\"columnMatch\":\"subscription_id\",\"formatter\":15,\"formatOptions\":{\"linkTarget\":null,\"showIcon\":true,\"customColumnWidthSetting\":\"25ch\"}},{\"columnMatch\":\"parent_id\",\"formatter\":5},{\"columnMatch\":\"id\",\"formatter\":5},{\"columnMatch\":\"category\",\"formatter\":5},{\"columnMatch\":\"policy_definition_id\",\"formatter\":5},{\"columnMatch\":\"policy_definition_display_name\",\"formatter\":5},{\"columnMatch\":\"policy_assignment_id\",\"formatter\":5},{\"columnMatch\":\"policy_set_definition_id\",\"formatter\":5},{\"columnMatch\":\"resource_group\",\"formatter\":5},{\"columnMatch\":\"state_weight\",\"formatter\":5}],\"rowLimit\":10000,\"hierarchySettings\":{\"idColumn\":\"id\",\"parentColumn\":\"parent_id\",\"treeType\":0,\"expanderColumn\":\"name\"},\"sortBy\":[{\"itemKey\":\"$gen_link_name_0\",\"sortOrder\":1}],\"labelSettings\":[{\"columnId\":\"name\",\"label\":\"Name\"},{\"columnId\":\"compliance_state\",\"label\":\"State\"},{\"columnId\":\"severity\",\"label\":\"Severity\"},{\"columnId\":\"action\",\"label\":\"Action\"},{\"columnId\":\"last_updated\",\"label\":\"Last Updated\"},{\"columnId\":\"resource_type\",\"label\":\"Resource Type\"},{\"columnId\":\"subscription_id\",\"label\":\"Subscription\"}]},\"sortBy\":[{\"itemKey\":\"$gen_link_name_0\",\"sortOrder\":1}]},\"name\":\"query - by_policy\",\"styleSettings\":{\"showBorder\":true}},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"**Details** (select a row to view additional information)\"},\"name\":\"text - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"{\\\"version\\\":\\\"ARMEndpoint/1.0\\\",\\\"data\\\":null,\\\"headers\\\":[],\\\"method\\\":\\\"GET\\\",\\\"path\\\":\\\"{_selected_resource_id}/providers/Microsoft.Authorization/policyExemptions?api-version=2022-07-01-preview\\\",\\\"urlParams\\\":[{\\\"key\\\":\\\"$filter\\\",\\\"value\\\":\\\"policyAssignmentId eq '{_assignment}'\\\"},{\\\"key\\\":\\\"$filter\\\",\\\"value\\\":\\\"excludeExpired()\\\"}],\\\"batchDisabled\\\":false,\\\"transformers\\\":[{\\\"type\\\":\\\"jsonpath\\\",\\\"settings\\\":{\\\"tablePath\\\":\\\"$.value\\\",\\\"columns\\\":[{\\\"path\\\":\\\"id\\\",\\\"columnid\\\":\\\"exemption_id\\\"},{\\\"path\\\":\\\"properties.exemptionCategory\\\",\\\"columnid\\\":\\\"category\\\"},{\\\"path\\\":\\\"properties.displayName\\\",\\\"columnid\\\":\\\"display_name\\\"},{\\\"path\\\":\\\"properties.description\\\",\\\"columnid\\\":\\\"description\\\"},{\\\"path\\\":\\\"$.id\\\",\\\"columnid\\\":\\\"scope\\\",\\\"columnType\\\":\\\"string\\\",\\\"substringRegexMatch\\\":\\\"^(.*)(/providers/.+)$\\\",\\\"substringReplace\\\":\\\"$1\\\"},{\\\"path\\\":\\\"systemData.lastModifiedAt\\\",\\\"columnid\\\":\\\"last_modified\\\"},{\\\"path\\\":\\\"$\\\",\\\"columnid\\\":\\\"details\\\"}]}}]}\",\"size\":1,\"title\":\"Exemptions (Shows all exemptions for the selected policy assignment applicable to the subscription of the selected resource)\",\"queryType\":12,\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"exemption_id\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"OpenBlade\",\"linkLabel\":\"Edit\",\"linkIsContextBlade\":false,\"bladeOpenContext\":{\"bladeName\":\"EditExemptionBlade\",\"extensionName\":\"Microsoft_Azure_Policy\",\"bladeParameters\":[{\"name\":\"exemptionId\",\"source\":\"column\",\"value\":\"exemption_id\"},{\"name\":\"assignmentId\",\"source\":\"static\",\"value\":\"{_assignment}\"}]},\"customColumnWidthSetting\":\"12ch\"}},{\"columnMatch\":\"display_name\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"55ch\"}},{\"columnMatch\":\"description\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkLabel\":\"\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"55ch\"}},{\"columnMatch\":\"scope\",\"formatter\":13,\"formatOptions\":{\"linkTarget\":\"Resource\",\"showIcon\":true}},{\"columnMatch\":\"last_modified\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"23ch\"}},{\"columnMatch\":\"details\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkLabel\":\"Details\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"13ch\"}},{\"columnMatch\":\"id\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"50ch\"}},{\"columnMatch\":\"properties\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkLabel\":\"Properties\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"16ch\"}},{\"columnMatch\":\"system_data\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkLabel\":\"System Data\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"16ch\"}},{\"columnMatch\":\"last_modified_by\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"35ch\"}}],\"sortBy\":[{\"itemKey\":\"$gen_link_scope_4\",\"sortOrder\":1}],\"labelSettings\":[{\"columnId\":\"exemption_id\",\"label\":\"Action\"},{\"columnId\":\"category\",\"label\":\"Category\"},{\"columnId\":\"display_name\",\"label\":\"Display Name\"},{\"columnId\":\"description\",\"label\":\"Description\"},{\"columnId\":\"scope\",\"label\":\"Scope\"},{\"columnId\":\"last_modified\",\"label\":\"Last Modified\"},{\"columnId\":\"details\",\"label\":\"Details\"}]},\"sortBy\":[{\"itemKey\":\"$gen_link_scope_4\",\"sortOrder\":1}]},\"conditionalVisibilities\":[{\"parameterName\":\"_selected_compliance_state\",\"comparison\":\"isEqualTo\",\"value\":\"exempt\"},{\"parameterName\":\"_selected_category\",\"comparison\":\"isEqualTo\",\"value\":\"resource\"}],\"name\":\"query - resource_exempts\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"resources\\n| where id =~ '{_selected_resource_id}'\\n| union (\\n    resourcecontainers\\n    | where id =~ '{_selected_resource_id}'\\n)\\n| extend details = pack_all()\\n| extend resource_info = pack (\\n    \\\"Display Name\\\", name,\\n    \\\"Type\\\", type,\\n    \\\"Tags\\\", tags,\\n    \\\"All Properties\\\", properties\\n)\\n| mv-expand resource_info\\n| extend prop=bag_keys(resource_info)\\n| project Property = prop[0], Value = resource_info[tostring(prop[0])]\",\"size\":1,\"title\":\"Resource\",\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"crossComponentResources\":[\"value::tenant\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Property\",\"formatter\":1,\"formatOptions\":{\"customColumnWidthSetting\":\"15ch\"}},{\"columnMatch\":\"Value\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"150ch\"}}]}},\"conditionalVisibility\":{\"parameterName\":\"_selected_category\",\"comparison\":\"isEqualTo\",\"value\":\"resource\"},\"name\":\"query - resource_info\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"policyresources\\n| where type == \\\"microsoft.authorization/policydefinitions\\\"\\n| where id =~ '{_selected_policy_definition_id}'\\n| extend policy_info = pack\\n(\\n \\\"Display Name\\\" , tostring(properties.displayName), \\n \\\"Version\\\", tostring(properties.metadata.version),\\n \\\"Description\\\", tostring(properties.description),\\n \\\"All Properties\\\", properties\\n)\\n| mv-expand policy_info\\n| extend prop=bag_keys(policy_info)\\n| project Property = prop[0], Value = policy_info[tostring(prop[0])]\",\"size\":1,\"title\":\"Policy\",\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"crossComponentResources\":[\"value::tenant\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Property\",\"formatter\":1,\"formatOptions\":{\"customColumnWidthSetting\":\"15ch\"}},{\"columnMatch\":\"Value\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"170ch\"}}]}},\"conditionalVisibility\":{\"parameterName\":\"_selected_category\",\"comparison\":\"isNotEqualTo\",\"value\":\"\"},\"name\":\"query - policy_definition_details\",\"styleSettings\":{\"showBorder\":true}}]},\"name\":\"group - by_policy - details\"}]},\"conditionalVisibility\":{\"parameterName\":\"_selected_tab\",\"comparison\":\"isEqualTo\",\"value\":\"by_policy_definition\"},\"name\":\"group - by_policy_definition\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"3d9fe000-eca1-4618-9e76-f6474098033d\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"_resource_type\",\"label\":\"Resource Type\",\"type\":2,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"policyresources \\n| where type =~ 'Microsoft.PolicyInsights/PolicyStates'\\n| extend subscription_id = tolower(tostring(properties.subscriptionId)) \\n| extend policy_assignment_id = tolower(tostring(properties.policyAssignmentId)) \\n| where policy_assignment_id == '{_assignment}' // selector\\n| where subscription_id in~ ({_subscriptions:subid}) // selector\\n| extend resource_type = tolower(tostring(properties.resourceType))\\n| distinct resource_type\\n| order by resource_type asc\",\"crossComponentResources\":[\"value::tenant\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"defaultValue\":\"value::all\",\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"value\":[\"value::all\"]},{\"id\":\"2e11306d-16f8-42ee-9f27-80c46122c657\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"_resource_compliance\",\"label\":\"Resource Compliance\",\"type\":2,\"description\":\"Filter resources by compliance state. By default compliant resources are filtered out.\",\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"jsonData\":\"[\\n {\\n \\\"value\\\": \\\"compliant\\\",\\n \\\"selected\\\": false\\n },\\n {\\n \\\"value\\\": \\\"noncompliant\\\",\\n \\\"selected\\\": true \\n },\\n {\\n \\\"value\\\": \\\"exempt\\\",\\n \\\"selected\\\": true \\n },\\n {\\n \\\"value\\\": \\\"error\\\",\\n \\\"selected\\\": true \\n },\\n {\\n \\\"value\\\": \\\"conflict\\\",\\n \\\"selected\\\": true \\n },\\n {\\n \\\"value\\\": \\\"protected\\\",\\n \\\"selected\\\": true \\n },\\n {\\n \\\"value\\\": \\\"unknown\\\",\\n \\\"selected\\\": true \\n },\\n {\\n \\\"value\\\": \\\"notapplicable\\\",\\n \\\"selected\\\": true \\n }\\n]\\n\\n\\n\\n\\n\",\"timeContext\":{\"durationMs\":86400000},\"value\":[\"exempt\",\"error\",\"conflict\",\"protected\",\"unknown\",\"notapplicable\",\"noncompliant\"]}],\"style\":\"above\",\"queryType\":0,\"resourceType\":\"microsoft.resources/tenants\"},\"name\":\"parameters - by_resource\",\"styleSettings\":{\"margin\":\"0px\",\"padding\":\"0px\"}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"// resource details\\npolicyresources \\n| where type =~ 'Microsoft.PolicyInsights/PolicyStates'\\n| extend subscription_id = tolower(tostring(properties.subscriptionId)) \\n| extend policy_assignment_id = tolower(tostring(properties.policyAssignmentId))\\n| extend policy_definition_id=tolower(tostring(properties.policyDefinitionId))\\n| where policy_assignment_id == '{_assignment}' // selector\\n| where subscription_id in~ ({_subscriptions:subid}) // selector\\n| extend resource_id = tolower(tostring(properties.resourceId))\\n| extend resource_type = tolower(tostring(properties.resourceType))\\n| extend resource_group = tolower(tostring(properties.resourceGroup))\\n| extend last_updated = tostring(properties.timestamp)\\n| extend s_resource_id = split(resource_id, '/')\\n| extend l_resource_id = array_length(s_resource_id)\\n| extend resource_name = tostring(s_resource_id[l_resource_id - 1])\\n| extend state_weight = toint(properties.stateWeight)\\n| extend id = resource_id\\n| extend parent_id = ''\\n| summarize state_weight=max(state_weight), last_updated=max(last_updated) by id, parent_id, name = resource_id, policy_assignment_id, subscription_id, resource_id, resource_name, resource_type\\n| extend compliance_state = case (\\n state_weight == 300, 'noncompliant',\\n state_weight == 200, 'compliant',\\n state_weight == 150, 'error',\\n state_weight == 100, 'conflict',\\n state_weight == 75, 'protected',\\n state_weight == 50, 'exempt',\\n state_weight == 10, 'unknown',\\n state_weight == 0,'notapplicable', \\n 'notapplicable'\\n)\\n// add `project` to order colum output\\n| project id, parent_id, name,compliance_state, last_updated,policy_assignment_id, resource_id, resource_name, resource_type, subscription_id\\n| extend category='resource'\\n| extend action = 'Create Exempt'\\n| where compliance_state in ({_resource_compliance}) // selector\\n| where resource_type in ({_resource_type}) // selector\\n| order by resource_name, name asc nulls last\\n// policy definition details\\n| union ( \\n policyresources \\n | where type =~ 'Microsoft.PolicyInsights/PolicyStates'\\n | extend subscription_id = tolower(tostring(properties.subscriptionId)) \\n | extend policy_assignment_id = tolower(tostring(properties.policyAssignmentId)) \\n | where policy_assignment_id == '{_assignment}' // selector\\n | where subscription_id in~ ({_subscriptions:subid}) // selector\\n | extend resource_id = tolower(tostring(properties.resourceId))\\n | extend resource_type = tolower(tostring(properties.resourceType))\\n | extend last_updated = tostring(properties.timestamp)\\n | extend s_resource_id = split(resource_id, '/')\\n | extend l_resource_id = array_length(s_resource_id)\\n | extend resource_name = tostring(s_resource_id[l_resource_id - 1])\\n | extend policy_set_definition_id = tolower(tolower(properties.policySetDefinitionId))\\n | extend state_weight = toint(properties.stateWeight)\\n | extend policy_definition_id = tolower(tolower(properties.policyDefinitionId))\\n | join kind=leftouter \\n (\\n policyresources \\n | where type =~ 'Microsoft.Authorization/PolicyDefinitions'\\n | extend policy_definition_id = tolower(id)\\n | extend policy_definition_display_name=tostring(properties.displayName)\\n | project policy_definition_id, policy_definition_display_name\\n ) on policy_definition_id\\n | extend id = strcat(policy_definition_id,resource_id)\\n | extend parent_id = resource_id\\n | summarize state_weight=max(state_weight) by name = policy_definition_display_name, parent_id, id, policy_definition_id, policy_set_definition_id, policy_assignment_id, last_updated, resource_type, resource_name, subscription_id, policy_definition_display_name, resource_id\\n | extend compliance_state = case (\\n state_weight == 300, 'noncompliant',\\n state_weight == 200, 'compliant',\\n state_weight == 150, 'error',\\n state_weight == 100, 'conflict',\\n state_weight == 75, 'protected',\\n state_weight == 50, 'exempt',\\n state_weight == 10, 'unknown',\\n state_weight == 0,'notapplicable', \\n 'notapplicable'\\n )\\n | extend category='policy'\\n | where compliance_state in ({_resource_compliance})\\n | where resource_type in ({_resource_type})\\n | project-away subscription_id, resource_type\\n)\\n| order by resource_name, name asc nulls last\\n// lookup policy severity from security recommendations. should be joined on policy definition level but prevented by max join limitation\\n// therefor severity is cleared out on resource level\\n | join kind=leftouter\\n    (\\n    securityresources\\n    | where type =~ \\\"microsoft.security/assessments\\\" or type =~ \\\"microsoft.security/assessments/governanceassignments\\\"\\n    | extend policy_definition_id=tolower(tostring(properties.metadata.policyDefinitionId))\\n    | extend severity=tostring(properties.metadata.severity)\\n    | summarize  severity=any(severity) by  policy_definition_id\\n    ) on policy_definition_id\\n| extend severity = iff(isempty(severity), 'Unknown', severity)\\n| extend severity = iff(category == 'resource', '', severity)\\n| extend policy_definition_ids=parse_json(strcat('[\\\"', policy_definition_id, '\\\"]'))\\n| project name, compliance_state, severity, action, last_updated, resource_name, resource_type, subscription_id,  parent_id, id, category, policy_definition_id, policy_set_definition_id, resource_id \\n| order by resource_name asc\\n\\n\",\"size\":0,\"title\":\"Compliance\",\"showRefreshButton\":true,\"exportedParameters\":[{\"fieldName\":\"category\",\"parameterName\":\"_selected_category\",\"parameterType\":1},{\"fieldName\":\"compliance_state\",\"parameterName\":\"_selected_compliance_state\",\"parameterType\":1},{\"fieldName\":\"resource_id\",\"parameterName\":\"_selected_resource_id\",\"parameterType\":1},{\"fieldName\":\"policy_definition_id\",\"parameterName\":\"_selected_policy_definition_id\",\"parameterType\":1}],\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"crossComponentResources\":[\"value::tenant\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"name\",\"formatter\":13,\"formatOptions\":{\"linkTarget\":\"Resource\",\"linkIsContextBlade\":false,\"showIcon\":true,\"customColumnWidthSetting\":\"80ch\"}},{\"columnMatch\":\"compliance_state\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"compliant\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"noncompliant\",\"representation\":\"4\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"exempt\",\"representation\":\"stopped\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"unknown\",\"text\":\"{0}{1}\"}],\"customColumnWidthSetting\":\"20ch\"}},{\"columnMatch\":\"severity\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"High\",\"representation\":\"Sev0\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Medium\",\"representation\":\"Sev1\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Low\",\"representation\":\"Sev2\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Unknown\",\"representation\":\"Sev3\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"Ellipsis\",\"text\":\"{0}{1}\"}],\"customColumnWidthSetting\":\"15ch\"}},{\"columnMatch\":\"action\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"OpenBlade\",\"bladeOpenContext\":{\"bladeName\":\"CreateExemptionBlade\",\"extensionName\":\"Microsoft_Azure_Policy\",\"bladeParameters\":[{\"name\":\"assignmentId\",\"source\":\"static\",\"value\":\"{_assignment}\"},{\"name\":\"exemptionScope\",\"source\":\"column\",\"value\":\"resource_id\"},{\"name\":\"definitionReferenceIds~\",\"source\":\"static\",\"value\":\"null\"},{\"name\":\"returnJsData~\",\"source\":\"static\",\"value\":\"false\"}]}}},{\"columnMatch\":\"last_updated\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"25ch\"}},{\"columnMatch\":\"resource_name\",\"formatter\":5,\"formatOptions\":{\"customColumnWidthSetting\":\"40ch\"}},{\"columnMatch\":\"resource_type\",\"formatter\":16,\"formatOptions\":{\"showIcon\":true,\"customColumnWidthSetting\":\"25ch\"}},{\"columnMatch\":\"subscription_id\",\"formatter\":15,\"formatOptions\":{\"linkTarget\":null,\"showIcon\":true,\"customColumnWidthSetting\":\"25ch\"}},{\"columnMatch\":\"parent_id\",\"formatter\":5},{\"columnMatch\":\"id\",\"formatter\":5},{\"columnMatch\":\"category\",\"formatter\":5},{\"columnMatch\":\"resource_id\",\"formatter\":5},{\"columnMatch\":\"policy_assignment_id\",\"formatter\":5},{\"columnMatch\":\"policy_definition_display_name\",\"formatter\":5},{\"columnMatch\":\"state_weight\",\"formatter\":5},{\"columnMatch\":\"policy_definition_ids\",\"formatter\":1}],\"rowLimit\":10000,\"hierarchySettings\":{\"idColumn\":\"id\",\"parentColumn\":\"parent_id\",\"treeType\":0,\"expanderColumn\":\"name\"},\"labelSettings\":[{\"columnId\":\"name\",\"label\":\"Name\"},{\"columnId\":\"compliance_state\",\"label\":\"State\"},{\"columnId\":\"severity\",\"label\":\"Severity\"},{\"columnId\":\"action\",\"label\":\"Action\"},{\"columnId\":\"last_updated\",\"label\":\"Last Updated\"},{\"columnId\":\"resource_type\",\"label\":\"Resource Type\"},{\"columnId\":\"subscription_id\",\"label\":\"Subscription\"}]},\"sortBy\":[]},\"name\":\"query - by_resource\",\"styleSettings\":{\"showBorder\":true}},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"**Details** (select a row to view additional information)\"},\"name\":\"text - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"{\\\"version\\\":\\\"ARMEndpoint/1.0\\\",\\\"data\\\":null,\\\"headers\\\":[],\\\"method\\\":\\\"GET\\\",\\\"path\\\":\\\"{_selected_resource_id}/providers/Microsoft.Authorization/policyExemptions?api-version=2022-07-01-preview\\\",\\\"urlParams\\\":[{\\\"key\\\":\\\"$filter\\\",\\\"value\\\":\\\"policyAssignmentId eq '{_assignment}'\\\"},{\\\"key\\\":\\\"\\\",\\\"value\\\":\\\"\\\"}],\\\"batchDisabled\\\":false,\\\"transformers\\\":[{\\\"type\\\":\\\"jsonpath\\\",\\\"settings\\\":{\\\"tablePath\\\":\\\"$.value\\\",\\\"columns\\\":[{\\\"path\\\":\\\"id\\\",\\\"columnid\\\":\\\"exemption_id\\\"},{\\\"path\\\":\\\"properties.exemptionCategory\\\",\\\"columnid\\\":\\\"category\\\"},{\\\"path\\\":\\\"properties.displayName\\\",\\\"columnid\\\":\\\"display_name\\\"},{\\\"path\\\":\\\"properties.description\\\",\\\"columnid\\\":\\\"description\\\"},{\\\"path\\\":\\\"$.id\\\",\\\"columnid\\\":\\\"scope\\\",\\\"columnType\\\":\\\"string\\\",\\\"substringRegexMatch\\\":\\\"^(.*)(/providers/.+)$\\\",\\\"substringReplace\\\":\\\"$1\\\"},{\\\"path\\\":\\\"systemData.lastModifiedAt\\\",\\\"columnid\\\":\\\"last_modified\\\"},{\\\"path\\\":\\\"$\\\",\\\"columnid\\\":\\\"details\\\"}]}}]}\",\"size\":4,\"title\":\"Exemptions (Shows all exemptions for the selected policy assignment applicable to the subscription of the selected resource)\",\"queryType\":12,\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"exemption_id\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"OpenBlade\",\"linkLabel\":\"Edit\",\"bladeOpenContext\":{\"bladeName\":\"EditExemptionBlade\",\"extensionName\":\"Microsoft_Azure_Policy\",\"bladeParameters\":[{\"name\":\"exemptionId\",\"source\":\"column\",\"value\":\"exemption_id\"},{\"name\":\"assignmentId\",\"source\":\"static\",\"value\":\"{_assignment}\"}]},\"customColumnWidthSetting\":\"12ch\"}},{\"columnMatch\":\"display_name\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"55ch\"}},{\"columnMatch\":\"description\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkLabel\":\"\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"55ch\"}},{\"columnMatch\":\"scope\",\"formatter\":13,\"formatOptions\":{\"linkTarget\":\"Resource\",\"showIcon\":true,\"customColumnWidthSetting\":\"30ch\"}},{\"columnMatch\":\"last_modified\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"25ch\"}},{\"columnMatch\":\"details\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkLabel\":\"Details\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"13ch\"}},{\"columnMatch\":\"id\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"50ch\"}},{\"columnMatch\":\"system_data\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkLabel\":\"System Data\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"16ch\"}},{\"columnMatch\":\"properties\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkLabel\":\"Properties\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"16ch\"}},{\"columnMatch\":\"last_modified_by\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"35ch\"}},{\"columnMatch\":\"assignment_id\",\"formatter\":5}],\"labelSettings\":[{\"columnId\":\"exemption_id\",\"label\":\"Action\"},{\"columnId\":\"category\",\"label\":\"Category\"},{\"columnId\":\"display_name\",\"label\":\"Display Name\"},{\"columnId\":\"description\",\"label\":\"Description\"},{\"columnId\":\"scope\",\"label\":\"Scope\"},{\"columnId\":\"last_modified\",\"label\":\"Last Modified\"},{\"columnId\":\"details\",\"label\":\"Details\"}]}},\"conditionalVisibility\":{\"parameterName\":\"_selected_compliance_state\",\"comparison\":\"isEqualTo\",\"value\":\"exempt\"},\"name\":\"query - resource_exempts\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"policyresources\\n| where type == \\\"microsoft.authorization/policydefinitions\\\"\\n| where id =~ '{_selected_policy_definition_id}'\\n| extend policy_info = pack\\n(\\n \\\"Display Name\\\" , tostring(properties.displayName), \\n \\\"Version\\\", tostring(properties.metadata.version),\\n \\\"Description\\\", tostring(properties.description),\\n \\\"All Properties\\\", properties\\n)\\n| mv-expand policy_info\\n| extend prop=bag_keys(policy_info)\\n| project Property = prop[0], Value = policy_info[tostring(prop[0])]\",\"size\":1,\"title\":\"Policy\",\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"crossComponentResources\":[\"value::tenant\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Property\",\"formatter\":1,\"formatOptions\":{\"customColumnWidthSetting\":\"15ch\"}},{\"columnMatch\":\"Value\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"150ch\"}}]}},\"conditionalVisibility\":{\"parameterName\":\"_selected_category\",\"comparison\":\"isEqualTo\",\"value\":\"policy\"},\"name\":\"query - policy_definition_details\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"resources\\n| where id =~ '{_selected_resource_id}'\\n| union (\\n    resourcecontainers\\n    | where id =~ '{_selected_resource_id}'\\n)\\n| extend resource_info = pack (\\n    \\\"Display Name\\\", name,\\n    \\\"Type\\\", type,\\n    \\\"Tags\\\", tags,\\n    \\\"All Properties\\\", properties\\n)\\n| mv-expand resource_info\\n| extend prop=bag_keys(resource_info)\\n| project Property = prop[0], Value = resource_info[tostring(prop[0])]\",\"size\":1,\"title\":\"Resource\",\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"crossComponentResources\":[\"value::tenant\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Property\",\"formatter\":1,\"formatOptions\":{\"customColumnWidthSetting\":\"15ch\"}},{\"columnMatch\":\"Value\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"150ch\"}}]}},\"conditionalVisibility\":{\"parameterName\":\"_selected_resource_id\",\"comparison\":\"isNotEqualTo\",\"value\":\"\"},\"name\":\"query - resource_info\",\"styleSettings\":{\"showBorder\":true}}]},\"name\":\"group - by_policy - details - Copy\"}]},\"conditionalVisibility\":{\"parameterName\":\"_selected_tab\",\"comparison\":\"isEqualTo\",\"value\":\"by_resource\"},\"name\":\"group - by_resource\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"crossComponentResources\":[\"value::tenant\"],\"parameters\":[{\"id\":\"2e46c0e0-b1e9-49a6-b4e2-9264f0550d61\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"_subscription\",\"label\":\"Subscription\",\"type\":5,\"isRequired\":true,\"query\":\"policyresources\\n| where type == \\\"microsoft.policyinsights/policystates\\\"\\n| where properties.policyAssignmentId == '{_assignment}'\\n| extend subscription_id=tolower(subscriptionId)\\n| join ( \\n resourcecontainers\\n | where type == \\\"microsoft.resources/subscriptions\\\"\\n | where properties.state =~ 'Enabled'\\n | project subscription_id=tolower(subscriptionId), subscription_name=name\\n) on subscription_id\\n| distinct subscription_id, subscription_name\\n| project Id=strcat('/subscriptions/', subscription_id), Label=subscription_name, Selected=true\",\"crossComponentResources\":[\"value::tenant\"],\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"value\":\"/subscriptions/815c9830-647b-484e-a16b-8d3d67c7a09e\"}],\"style\":\"above\",\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\"},\"name\":\"parameters - 1\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"{\\\"version\\\":\\\"ARMEndpoint/1.0\\\",\\\"data\\\":null,\\\"headers\\\":[],\\\"method\\\":\\\"GET\\\",\\\"path\\\":\\\"{_subscription}/providers/Microsoft.Authorization/policyExemptions?api-version=2022-07-01-preview\\\",\\\"urlParams\\\":[{\\\"key\\\":\\\"$filter\\\",\\\"value\\\":\\\"policyAssignmentId eq '{_assignment}'\\\"},{\\\"key\\\":\\\"\\\",\\\"value\\\":\\\"\\\"}],\\\"batchDisabled\\\":false,\\\"transformers\\\":[{\\\"type\\\":\\\"jsonpath\\\",\\\"settings\\\":{\\\"tablePath\\\":\\\"$.value\\\",\\\"columns\\\":[{\\\"path\\\":\\\"id\\\",\\\"columnid\\\":\\\"exemption_id\\\"},{\\\"path\\\":\\\"properties.exemptionCategory\\\",\\\"columnid\\\":\\\"category\\\"},{\\\"path\\\":\\\"properties.displayName\\\",\\\"columnid\\\":\\\"display_name\\\"},{\\\"path\\\":\\\"properties.description\\\",\\\"columnid\\\":\\\"description\\\"},{\\\"path\\\":\\\"properties.policyAssignmentId\\\",\\\"columnid\\\":\\\"assignment_id\\\"},{\\\"path\\\":\\\"$.id\\\",\\\"columnid\\\":\\\"scope\\\",\\\"columnType\\\":\\\"string\\\",\\\"substringRegexMatch\\\":\\\"^(.*)(/providers/.+)$\\\",\\\"substringReplace\\\":\\\"$1\\\"},{\\\"path\\\":\\\"systemData.lastModifiedAt\\\",\\\"columnid\\\":\\\"last_modified\\\"},{\\\"path\\\":\\\"$\\\",\\\"columnid\\\":\\\"Details\\\"}]}}]}\",\"size\":0,\"noDataMessage\":\"No exemptions were found for this assignment scope\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":12,\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"exemption_id\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"OpenBlade\",\"linkLabel\":\"Edit\",\"bladeOpenContext\":{\"bladeName\":\"EditExemptionBlade\",\"extensionName\":\"Microsoft_Azure_Policy\",\"bladeParameters\":[{\"name\":\"assignmentId\",\"source\":\"column\",\"value\":\"assignment_id\"},{\"name\":\"exemptionId\",\"source\":\"column\",\"value\":\"exemption_id\"}]},\"customColumnWidthSetting\":\"12ch\"}},{\"columnMatch\":\"display_name\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true,\"bladeOpenContext\":{\"bladeName\":\"EditExemptionBlade\",\"extensionName\":\"Microsoft_Azure_Policy\",\"bladeParameters\":[{\"name\":\"assignmentId\",\"source\":\"column\",\"value\":\"assignment_id\"},{\"name\":\"exemptionId\",\"source\":\"column\",\"value\":\"exemption_id\"}]},\"customColumnWidthSetting\":\"55ch\"}},{\"columnMatch\":\"description\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkLabel\":\"\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"55ch\"}},{\"columnMatch\":\"assignment_id\",\"formatter\":5},{\"columnMatch\":\"scope\",\"formatter\":13,\"formatOptions\":{\"linkTarget\":\"Resource\",\"linkIsContextBlade\":false,\"showIcon\":true,\"customColumnWidthSetting\":\"30ch\"}},{\"columnMatch\":\"last_modified\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"25ch\"}},{\"columnMatch\":\"Details\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkLabel\":\"Details\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"13ch\"}},{\"columnMatch\":\"system_data\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkLabel\":\"System Data\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"16ch\"}}],\"sortBy\":[{\"itemKey\":\"$gen_link_scope_5\",\"sortOrder\":1}],\"labelSettings\":[{\"columnId\":\"exemption_id\",\"label\":\"Action\"},{\"columnId\":\"category\",\"label\":\"Category\"},{\"columnId\":\"display_name\",\"label\":\"Display Name\"},{\"columnId\":\"description\",\"label\":\"Description\"},{\"columnId\":\"scope\",\"label\":\"Scope\"},{\"columnId\":\"last_modified\",\"label\":\"Last Modified\"}]},\"sortBy\":[{\"itemKey\":\"$gen_link_scope_5\",\"sortOrder\":1}]},\"name\":\"query - 0\",\"styleSettings\":{\"showBorder\":true}}]},\"conditionalVisibility\":{\"parameterName\":\"_selected_tab\",\"comparison\":\"isEqualTo\",\"value\":\"exempts\"},\"name\":\"group - exempts\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\" policyresources\\n| where type == \\\"microsoft.authorization/policysetdefinitions\\\"\\n| where id =~ '{_policy_set_definition_id}'\\n| extend policy_set_definition_id = tolower(id)\\n| extend initiative_name = tostring(properties.displayName)\\n| extend initiative_version = tostring(properties.metadata.version)\\n| extend Details=pack_all()\\n| project ['Display Name'] = tostring(properties.displayName), \\n ['Description'] = tostring(properties.description), \\n Version = tostring(properties.metadata.version),\\n ['Created On'] = format_datetime(todatetime(systemData.createdAt), 'yyyy-MM-dd HH:mm:ss'),\\n ['Created By'] = tostring(systemData.createdBy),\\n Details\\n\",\"size\":4,\"title\":\"Initiative Definition\",\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"crossComponentResources\":[\"value::tenant\"],\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Action\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"OpenBlade\",\"bladeOpenContext\":{\"bladeName\":\"InitiativeDetail.ReactView\",\"extensionName\":\"Microsoft_Azure_Policy\",\"bladeParameters\":[{\"name\":\"id\",\"source\":\"column\",\"value\":\"Policy Set Definition  Id\"}]}}},{\"columnMatch\":\"Display Name\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"35ch\"}},{\"columnMatch\":\"Description\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkLabel\":\"Description\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"15ch\"}},{\"columnMatch\":\"Version\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"15ch\"}},{\"columnMatch\":\"Created On\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"25ch\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"}}},{\"columnMatch\":\"Created By\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"40ch\"}},{\"columnMatch\":\"Details\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkLabel\":\"Details\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"15ch\"}},{\"columnMatch\":\"Assignment Id\",\"formatter\":5}]}},\"name\":\"query - assignment_set_definition\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"policyresources \\n| where type == \\\"microsoft.authorization/policyassignments\\\"\\n| where id =~ '{_assignment}' // selector\\n| extend policy_set_definition_id = tolower(tostring(properties.policyDefinitionId))\\n| extend Details = pack_all()\\n| project ['Action']='Edit', ['Display Name'] = tostring(properties.displayName),\\n ['Created By'] = tostring(systemData.createdBy),\\n ['Created On'] = format_datetime(todatetime(systemData.createdAt), 'yyyy-MM-dd HH:mm:ss'),\\n ['Last Modified By'] = tostring(systemData.lastModifiedBy),\\n ['Last Modified On'] = format_datetime(todatetime(systemData.lastModifiedAt), 'yyyy-MM-dd HH:mm:ss'),\\n Details, id\\n\\n\",\"size\":4,\"title\":\"Initiative Assignment\",\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"crossComponentResources\":[\"value::tenant\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Action\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"OpenBlade\",\"linkIsContextBlade\":false,\"bladeOpenContext\":{\"bladeName\":\"EditAssignmentBladeV2\",\"extensionName\":\"Microsoft_Azure_Policy\",\"bladeParameters\":[{\"name\":\"assignmentId\",\"source\":\"column\",\"value\":\"id\"}]}}},{\"columnMatch\":\"Display Name\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"35ch\"}},{\"columnMatch\":\"Created By\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"40ch\"}},{\"columnMatch\":\"Created On\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"25ch\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"}}},{\"columnMatch\":\"Details\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkLabel\":\"Details\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"15ch\"}},{\"columnMatch\":\"id\",\"formatter\":5},{\"columnMatch\":\"Description\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkLabel\":\"Description\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"15ch\"}},{\"columnMatch\":\"Version\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"15ch\"}}]}},\"name\":\"query - assignment_set_assignment\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"policyresources \\n| where type =~ 'microsoft.authorization/policysetdefinitions'\\n| where id =~ '{_policy_set_definition_id}'\\n| extend policy_set_definition_id = tolower(id)\\n| extend default_parameters = properties.parameters\\n| mv-expand default_parameters limit 2000\\n| extend prop=bag_keys(todynamic(default_parameters))[0]\\n| project param_name=tostring(prop),param_display_name=default_parameters[tostring(prop)].metadata.displayName, param_default_value=default_parameters[tostring(prop)].defaultValue, param_allowed_values=default_parameters[tostring(prop)].allowedValues, policy_set_definition_id\\n| join kind=leftouter( \\n policyresources \\n | where type == \\\"microsoft.authorization/policyassignments\\\"\\n | where id=~ '{_assignment}'\\n | extend assignment_parameters = properties.parameters\\n | extend policy_set_definition_id = tolower(tostring(properties.policyDefinitionId))\\n | mv-expand assignment_parameters\\n | extend prop=bag_keys(todynamic(assignment_parameters))[0]\\n | project param_name = tostring(prop), param_assignment_value = assignment_parameters[tostring(prop)].value, policy_set_definition_id\\n ) on param_name, policy_set_definition_id\\n| order by tostring(param_display_name) asc\\n| project Action = 'Edit', param_name, ['Display Name']=param_display_name, ['Allowed Values']=param_allowed_values, ['Default Values']=param_default_value, ['Assignment Values']=param_assignment_value, assigment_id='{_assignment}'\\n| extend Details = pack_all()\",\"size\":2,\"title\":\"Parameters\",\"showExportToExcel\":true,\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"crossComponentResources\":[\"value::tenant\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Action\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"OpenBlade\",\"linkLabel\":\"Edit\",\"linkIsContextBlade\":true,\"bladeOpenContext\":{\"bladeName\":\"EditAssignmentBladeV2\",\"extensionName\":\"Microsoft_Azure_Policy\",\"bladeParameters\":[{\"name\":\"assignmentId\",\"source\":\"column\",\"value\":\"assigment_id\"}]}}},{\"columnMatch\":\"param_name\",\"formatter\":5},{\"columnMatch\":\"Display Name\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"75ch\"}},{\"columnMatch\":\"Allowed Values\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"35ch\"}},{\"columnMatch\":\"Default Values\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"35ch\"}},{\"columnMatch\":\"Assignment Values\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"35ch\"}},{\"columnMatch\":\"assigment_id\",\"formatter\":5},{\"columnMatch\":\"Details\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkLabel\":\"Details\",\"linkIsContextBlade\":true}},{\"columnMatch\":\"Asignment Values\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"30ch\"}},{\"columnMatch\":\"details\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"12ch\"}},{\"columnMatch\":\"param_display_name\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"70ch\"}}],\"rowLimit\":10000,\"filter\":true}},\"name\":\"query - assignment_paramaters\",\"styleSettings\":{\"showBorder\":true}}]},\"conditionalVisibility\":{\"parameterName\":\"_selected_tab\",\"comparison\":\"isEqualTo\",\"value\":\"assignment\"},\"name\":\"group - assignment\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"b0905c4b-8ab9-48ea-9e2a-1cc12ce87d9e\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"_severity\",\"label\":\"Severity\",\"type\":2,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"{\\\"version\\\":\\\"1.0.0\\\",\\\"content\\\":\\\"[\\\\n\\\\t{\\\\n\\\\t\\\\t\\\\\\\"value\\\\\\\": \\\\\\\"High\\\\\\\"\\\\n\\\\t},\\\\n\\\\t{\\\\n\\\\t\\\\t\\\\\\\"value\\\\\\\": \\\\\\\"Medium\\\\\\\"\\\\n\\\\t},\\\\n\\\\t{\\\\n\\\\t\\\\t\\\\\\\"value\\\\\\\": \\\\\\\"Low\\\\\\\"\\\\n\\\\t}\\\\n]\\\",\\\"transformers\\\":null}\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"defaultValue\":\"value::all\",\"queryType\":8,\"value\":[\"value::all\"]},{\"id\":\"1b2d4340-a43b-4f81-a986-2ed51ef1cbef\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"_status\",\"label\":\"Status\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"{\\\"version\\\":\\\"1.0.0\\\",\\\"content\\\":\\\"[\\\\n\\\\t{\\\\n\\\\t\\\\t\\\\\\\"value\\\\\\\": \\\\\\\"Completed\\\\\\\"\\\\n\\\\t},\\\\n\\\\t{\\\\n\\\\t\\\\t\\\\\\\"value\\\\\\\": \\\\\\\"Unassigned\\\\\\\"\\\\n\\\\t},\\\\n\\\\t{\\\\n\\\\t\\\\t\\\\\\\"value\\\\\\\": \\\\\\\"OnTime\\\\\\\"\\\\n\\\\t},\\\\n\\\\t{\\\\n\\\\t\\\\t\\\\\\\"value\\\\\\\": \\\\\\\"Overdue\\\\\\\"\\\\n\\\\t},\\\\n\\\\t{\\\\n\\\\t\\\\t\\\\\\\"value\\\\\\\": \\\\\\\"Unknown\\\\\\\"\\\\n\\\\t}\\\\n]\\\",\\\"transformers\\\":null}\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"]},\"timeContext\":{\"durationMs\":86400000},\"defaultValue\":\"value::all\",\"queryType\":8,\"value\":[\"Unassigned\",\"Overdue\",\"Unknown\"]}],\"style\":\"pills\",\"queryType\":8},\"name\":\"parameters - 1\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"// query taken from Microsoft Defender for Cloud portal \\n// modifications are marked in query\\nsecurityresources\\n        | where type == \\\"microsoft.security/assessments\\\" or type == \\\"microsoft.security/assessments/governanceassignments\\\"\\n        | where subscriptionId in~ ({_subscriptions:subid})\\n        | extend source = iff(type == \\\"microsoft.security/assessments\\\", trim(' ', tolower(tostring(properties.resourceDetails.Source))), dynamic(null))\\n        | extend resourceId = iff(type == \\\"microsoft.security/assessments\\\", trim(\\\" \\\", tolower(tostring(case(source =~ \\\"azure\\\", properties.resourceDetails.Id,\\n            (type == \\\"microsoft.security/assessments\\\" and (source =~ \\\"aws\\\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)))), properties.resourceDetails.Id,\\n            (type == \\\"microsoft.security/assessments\\\" and (source =~ \\\"gcp\\\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)))), properties.resourceDetails.Id,\\n            source =~ \\\"aws\\\", properties.resourceDetails.AzureResourceId,\\n            source =~ \\\"gcp\\\", properties.resourceDetails.AzureResourceId,\\n            extract(\\\"^(?i)(.+)/providers/Microsoft.Security/assessments/.+$\\\",1,id)\\n            )))), dynamic(null))\\n        | extend isAssessment = iff(type == \\\"microsoft.security/assessments\\\", 1, 0)\\n        | extend isAssignment = iff(type == \\\"microsoft.security/assessments/governanceassignments\\\", 1, 0)\\n        | extend assessmentId = iff(type == \\\"microsoft.security/assessments\\\", id, dynamic(null))\\n        | extend assignedResourceId = iff(type == \\\"microsoft.security/assessments/governanceassignments\\\", tostring(properties.assignedResourceId), dynamic(null))\\n        | extend idForSummarize = iff(isAssessment == 1, tolower(assessmentId), tolower(assignedResourceId))\\n        | extend assessmentKey = iff(type == \\\"microsoft.security/assessments\\\", name, dynamic(null))\\n        | extend assessmentDisplayName = iff(type == \\\"microsoft.security/assessments\\\", tostring(properties.displayName), dynamic(null))\\n        | extend displayName = assessmentDisplayName\\n        | project-away assessmentDisplayName\\n        | extend statusCode = iff(type == \\\"microsoft.security/assessments\\\", tostring(properties.status.code), dynamic(null))\\n        | extend isUnhealthy = iff(statusCode == \\\"Unhealthy\\\", 1, 0)\\n        | extend maturityLevel = iff(type == \\\"microsoft.security/assessments\\\", case(\\n                    isnull(properties.metadata.preview), \\\"GA\\\",\\n                    tobool(properties.metadata.preview), \\\"Preview\\\",\\n                    \\\"GA\\\"), dynamic(null))\\n        | extend statusPerInitiative = todynamic(properties.statusPerInitiative)\\n        | extend regexResourceId = iff(type == \\\"microsoft.security/assessments\\\", extract_all(@\\\"/providers/([^/]+)(?:/([^/]+)/[^/]+(?:/([^/]+)/[^/]+)?)?/([^/]+)/[^/]+(?:/([^/]+)/[^/]+(?:/([^/]+)/[^/]+)?)?$\\\", resourceId), dynamic(null))\\n        | extend regexResourceType = iff(type == \\\"microsoft.security/assessments\\\", regexResourceId[0], dynamic(null))\\n        | extend providerName = iff(type == \\\"microsoft.security/assessments\\\", regexResourceType[0], dynamic(null))\\n        | extend mainType = iff(type == \\\"microsoft.security/assessments\\\", case(regexResourceType[1] !~ \\\"\\\", strcat(\\\"/\\\",regexResourceType[1]), \\\"\\\"), dynamic(null))\\n        | extend extendedType = iff(type == \\\"microsoft.security/assessments\\\", case(regexResourceType[2] !~ \\\"\\\", strcat(\\\"/\\\",regexResourceType[2]), \\\"\\\"), dynamic(null))\\n        | extend resourceType = iff(type == \\\"microsoft.security/assessments\\\", case(regexResourceType[3] !~ \\\"\\\", strcat(\\\"/\\\",regexResourceType[3]), \\\"\\\"), dynamic(null))\\n        | extend additionalType = iff(type == \\\"microsoft.security/assessments\\\", case(regexResourceType[4] !~ \\\"\\\", strcat(\\\"/\\\",regexResourceType[4]), \\\"\\\"), dynamic(null))\\n        | extend typeFullPath = iff(type == \\\"microsoft.security/assessments\\\", tolower(properties.resourceDetails.ResourceType), dynamic(null))\\n        | extend severity = iff(type == \\\"microsoft.security/assessments\\\", tostring(properties.metadata.severity), dynamic(null))\\n        | extend severityNumber = iff(type == \\\"microsoft.security/assessments\\\", case(\\n                    severity == \\\"Low\\\", 1,\\n                    severity == \\\"Medium\\\", 2,\\n                    severity == \\\"High\\\", 3,\\n                    dynamic(null)\\n                ), dynamic(null))\\n        | extend environment = iff(type == \\\"microsoft.security/assessments\\\", case(\\n                    source == \\\"azure\\\" or source == \\\"onpremise\\\", \\\"Azure\\\",\\n                    source == \\\"aws\\\", \\\"AWS\\\",\\n                    source == \\\"gcp\\\", \\\"GCP\\\",\\n                    source == \\\"github\\\", \\\"GitHub\\\",\\n                    source == \\\"azuredevops\\\", \\\"AzureDevOps\\\",\\n                    dynamic(null)\\n                ), dynamic(null))\\n| where ((environment =~ \\\"AWS\\\" or environment =~ \\\"Azure\\\" or environment =~ \\\"AzureDevOps\\\" or environment =~ \\\"GCP\\\" or environment =~ \\\"GitHub\\\")) or (isAssessment == 0)\\n        | extend dueDate = iff(type == \\\"microsoft.security/assessments/governanceassignments\\\", todatetime(properties.remediationDueDate), dynamic(null))\\n        | extend eta = iff(type == \\\"microsoft.security/assessments/governanceassignments\\\", todatetime(properties.remediationEta.eta), dynamic(null))\\n        | extend govCompletionStatus = iff(type == \\\"microsoft.security/assessments/governanceassignments\\\", case(\\n                            isnull(todatetime(properties.remediationDueDate)), \\\"NoDueDate\\\",\\n                            // We round up the current date time to be the start of the day, as the due date is inclusive\\n                            todatetime(properties.remediationDueDate) >= bin(now(), 1d), \\\"OnTime\\\",\\n                            \\\"Overdue\\\"\\n                        ), dynamic(null))\\n        | extend isGracePeriod = iff(type == \\\"microsoft.security/assessments/governanceassignments\\\", iff(govCompletionStatus == \\\"OnTime\\\", tobool(properties.isGracePeriod), false), dynamic(null))\\n        | summarize \\n                    statusPerInitiative = anyif(statusPerInitiative, isAssessment == 1),\\n                    source = anyif(source, isAssessment == 1),\\n                    assessmentKey = anyif(assessmentKey, isAssessment == 1),\\n                    resourceId = anyif(resourceId, isAssessment == 1),\\n                    displayName = anyif(displayName, isAssessment == 1),\\n                    statusCode = anyif(statusCode, isAssessment == 1),\\n                    maturityLevel = anyif(maturityLevel, isAssessment == 1),\\n                    severity = anyif(severity, isAssessment == 1),\\n                    severityNumber = anyif(severityNumber, isAssessment == 1),\\n                    environment = anyif(environment, isAssessment == 1),\\n                    isUnhealthy = anyif(isUnhealthy, isAssessment == 1),\\n                    typeFullPath = anyif(typeFullPath, isAssessment == 1),\\n                    dueDate = anyif(dueDate, isAssignment == 1),\\n                    eta = anyif(eta, isAssignment == 1),\\n                    isGracePeriod = anyif(isGracePeriod, isAssignment == 1),\\n                    govCompletionStatus = anyif(govCompletionStatus, isAssignment == 1),\\n                    hasAssignment = max(isAssignment),\\n                    hasAssessmentData = sum(isAssessment) by idForSummarize\\n        | where hasAssessmentData > 0\\n        | mv-expand statusPerInitiative limit 400\\n        | extend policyInitiativeName = tostring(statusPerInitiative.policyInitiativeName)\\n        // Modification: only show recommendations for selected policy set\\n        | extend policyInitiativeId= tostring(statusPerInitiative.policyInitiativeId)\\n        | where policyInitiativeId =~ split('{_policy_set_definition_id}', '/')[-1]\\n        // End modification\\n        | extend now = now()\\n        | extend completionStatus = case(\\n            isUnhealthy == 0, \\\"Completed\\\", \\n            govCompletionStatus == \\\"Overdue\\\", \\\"Overdue\\\",\\n            govCompletionStatus == \\\"OnTime\\\", \\\"OnTime\\\",\\n            \\\"Unassigned\\\")\\n        | extend completionStatusNumber = case(\\n            completionStatus == \\\"Completed\\\", 0,\\n            completionStatus in (\\\"Unassigned\\\", \\\"Unhealthy\\\"), 1,\\n            completionStatus == \\\"OnTime\\\", 2,\\n            completionStatus == \\\"Overdue\\\", 3,\\n            -1)\\n        | summarize initiatives = make_set_if(policyInitiativeName, isnotempty(policyInitiativeName)),\\n                    //source = any(source),\\n                    assessmentKey = any(assessmentKey),\\n                    displayName = any(displayName),\\n                    statusCode = any(statusCode),\\n                    maturityLevel = any(maturityLevel),\\n                    severity = any(severity),\\n                    severityNumber = any(severityNumber),\\n                    environment = any(environment),\\n                    dueDate = any(dueDate),\\n                    eta = any(eta),\\n                    isGracePeriod = any(isGracePeriod),\\n                    typeFullPath = any(typeFullPath),\\n                    completionStatus = any(completionStatus),\\n                    completionStatusNumber = any(completionStatusNumber) by idForSummarize\\n        | summarize resourceCount = count(),\\n                    environments = make_set(environment),\\n                    displayName = any(displayName),\\n                    maturityLevel = any(maturityLevel),\\n                    initiatives = make_set(initiatives),\\n                    resourceTypes = make_set(typeFullPath),\\n                    severity = any(severity),\\n                    severityNumber = any(severityNumber),\\n                    dueDate = min(dueDate),\\n                    eta = min(eta),\\n                    isGracePeriod = iff(sum(isGracePeriod) > 0, 1, 0),\\n                    completionStatusNumber = max(completionStatusNumber) by assessmentKey, statusCode\\n        | extend statusAndCount = pack(\\\"statusCode\\\", statusCode, \\\"resourceCount\\\", resourceCount)\\n        | summarize statusAndCount = make_list(statusAndCount),\\n                    resourceCount = sum(resourceCount),\\n                    environments = make_set(environments),\\n                    displayName = any(displayName),\\n                    maturityLevel = any(maturityLevel),\\n                    initiatives = make_set(initiatives),\\n                    severity = any(severity),\\n                    severityNumber = any(severityNumber),\\n                    dueDate = min(dueDate),\\n                    eta = min(eta),\\n                    isGracePeriod = iff(sum(isGracePeriod) > 0, 1, 0),\\n                    resourceTypes = make_set(resourceTypes),\\n                    completionStatusNumber = max(completionStatusNumber) by assessmentKey\\n        | extend completionStatus = case(\\n            completionStatusNumber == 0, \\\"Completed\\\",\\n            completionStatusNumber == 1, \\\"Unassigned\\\",\\n            completionStatusNumber == 2, \\\"OnTime\\\",\\n            completionStatusNumber == 3, \\\"Overdue\\\",\\n            \\\"Unknown\\\")\\n        | order by severityNumber desc\\n            | extend controlsData = dynamic([])\\n            | sort by severityNumber desc, displayName asc\\n    // Modification: apply dynamic filters and extract resource status details\\n    | where severity in~ ({_severity})\\n    | where completionStatus in~ ({_status})\\n    | extend subscriptions = dynamic([{_subscriptions:subid}])\\n    | extend resource_count_na=extract('\\\"statusCode\\\":\\\"NotApplicable\\\",\\\"resourceCount\\\":([0-9]+)', 1, tostring(statusAndCount), typeof(int))\\n    | extend resource_count_healthy=extract('\\\"statusCode\\\":\\\"Healthy\\\",\\\"resourceCount\\\":([0-9]+)', 1, tostring(statusAndCount), typeof(int))\\n    | extend resource_count_unhealthy=extract('\\\"statusCode\\\":\\\"Unhealthy\\\",\\\"resourceCount\\\":([0-9]+)', 1, tostring(statusAndCount), typeof(int))\\n    | project  subscriptions, assessmentKey, severityNumber, Severity=severity, Name=displayName, Status=completionStatus, resources=resourceCount, resource_count_na, resource_count_healthy, resource_count_unhealthy\\n    | order by severityNumber , Name asc\\n\",\"size\":2,\"showExportToExcel\":true,\"exportToExcelOptions\":\"all\",\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"crossComponentResources\":[\"value::tenant\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"subscriptions\",\"formatter\":5},{\"columnMatch\":\"assessmentKey\",\"formatter\":5},{\"columnMatch\":\"severityNumber\",\"formatter\":5},{\"columnMatch\":\"Severity\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"High\",\"representation\":\"Sev0\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Medium\",\"representation\":\"Sev1\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Low\",\"representation\":\"Sev2\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Unknown\",\"representation\":\"question\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"Subtract\",\"text\":\"{0}{1}\"}],\"customColumnWidthSetting\":\"15ch\"}},{\"columnMatch\":\"Name\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"OpenBlade\",\"linkIsContextBlade\":false,\"bladeOpenContext\":{\"bladeName\":\"GenericRecommendationDetailsBlade\",\"extensionName\":\"Microsoft_Azure_Security\",\"bladeParameters\":[{\"name\":\"assessmentKey\",\"source\":\"column\",\"value\":\"assessmentKey\"},{\"name\":\"subscriptionIds\",\"source\":\"column\",\"value\":\"subscriptions\"},{\"name\":\"showSecurityCenterCommandBar~\",\"source\":\"static\",\"value\":\"false\"},{\"name\":\"assessmentOwners~\",\"source\":\"static\",\"value\":\"null\"}]},\"customColumnWidthSetting\":\"100ch\"}},{\"columnMatch\":\"resources\",\"formatter\":22,\"formatOptions\":{\"compositeBarSettings\":{\"labelText\":\"\",\"columnSettings\":[{\"columnName\":\"resource_count_healthy\",\"color\":\"green\"},{\"columnName\":\"resource_count_unhealthy\",\"color\":\"redBright\"},{\"columnName\":\"resource_count_na\",\"color\":\"gray\"}],\"noRowsScaling\":true},\"customColumnWidthSetting\":\"14ch\"}},{\"columnMatch\":\"resource_count_na\",\"formatter\":5},{\"columnMatch\":\"resource_count_healthy\",\"formatter\":5},{\"columnMatch\":\"resource_count_unhealthy\",\"formatter\":5},{\"columnMatch\":\"resourceTypes\",\"formatter\":16,\"formatOptions\":{\"showIcon\":true,\"customColumnWidthSetting\":\"40ch\"}}],\"labelSettings\":[{\"columnId\":\"resources\",\"label\":\"Resources\"}]},\"sortBy\":[]},\"name\":\"query - recommendations\",\"styleSettings\":{\"showBorder\":true}}]},\"conditionalVisibility\":{\"parameterName\":\"_selected_tab\",\"comparison\":\"isEqualTo\",\"value\":\"recommendations\"},\"name\":\"group - recommendations\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"title\":\"Export\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"\\npolicyresources\\n| where type == \\\"microsoft.authorization/policysetdefinitions\\\"\\n| extend policy_set_definition_id = tolower(id)\\n| where policy_set_definition_id == '{_policy_set_definition_id}'\\n| extend policy_set_definition_groups = properties.policyDefinitionGroups\\n| mv-expand policy_set_definition_groups limit 2000\\n| project policy_definition_group_name = tolower(policy_set_definition_groups.name), policy_definition_group_display_name=policy_set_definition_groups.displayName, policy_definition_group_description=policy_set_definition_groups.description, policy_set_definition_id\\n| order by policy_definition_group_name asc\\n| join kind=leftouter(\\n policyresources \\n | where type =~ 'Microsoft.PolicyInsights/PolicyStates'\\n | extend subscription_id = tolower(tostring(properties.subscriptionId)) \\n | extend policy_assignment_id = tolower(tostring(properties.policyAssignmentId)) \\n | where policy_assignment_id == '{_assignment}' // selector\\n | where subscription_id in~ ({_subscriptions:subid}) // selector\\n | extend resource_id = tolower(tostring(properties.resourceId))\\n | extend state_weight = toint(properties.stateWeight)\\n | extend policy_definition_id = tolower(tolower(properties.policyDefinitionId))\\n | extend policy_set_definition_id = tolower(tolower(properties.policySetDefinitionId))\\n | extend policy_definition_group_names = iff(isnotnull(properties.policyDefinitionGroupNames), properties.policyDefinitionGroupNames, dynamic(['']))\\n | mv-expand policy_definition_group_names limit 2000\\n | extend policy_definition_group_name = tolower(tostring(policy_definition_group_names))\\n | summarize state_weight=max(state_weight) by policy_definition_group_name, policy_set_definition_id, policy_assignment_id, policy_definition_id, resource_id\\n | summarize resource_count=count() by policy_definition_group_name, policy_set_definition_id, policy_assignment_id, state_weight\\n | extend noncompliant_resources = toint(iff(state_weight == 300, resource_count, 0))\\n | extend compliant_resources = toint(iff(state_weight == 200, resource_count, 0))\\n | extend exempt_resources = toint(iff(state_weight == 50, resource_count, 0))\\n | extend other_resources = toint(iff(state_weight in (10, 75, 100, 150), resource_count, 0))\\n | summarize state_weight=max(state_weight), \\n noncompliant_resources=sum(noncompliant_resources),\\n compliant_resources=sum(compliant_resources),\\n exempt_resources=sum(exempt_resources),\\n other_resources=sum(other_resources)\\n by policy_definition_group_name, \\n policy_set_definition_id, \\n policy_assignment_id\\n | extend compliance_state = case (\\n state_weight == 300, 'noncompliant',\\n state_weight == 200, 'compliant',\\n state_weight == 150, 'error',\\n state_weight == 100, 'conflict',\\n state_weight == 75, 'protected',\\n state_weight == 50, 'exempt',\\n state_weight == 10, 'unknown',\\n state_weight == 0,'notapplicable', \\n 'notapplicable'\\n )\\n) on policy_definition_group_name\\n| extend compliance_state=iff(isempty(compliance_state), 'notapplicable', compliance_state)\\n| extend export_date = now()\\n| project export_date, \\n ['Name'] = policy_definition_group_name, \\n ['Display Name'] = policy_definition_group_display_name, \\n ['Description'] = policy_definition_group_description, \\n ['State'] = compliance_state, \\n ['Total Resources'] = (compliant_resources + noncompliant_resources + exempt_resources + other_resources),\\n ['Compliant' ] = compliant_resources, \\n ['NonCompliant'] = noncompliant_resources, \\n ['Exempt'] = exempt_resources, \\n ['Other'] = other_resources\\n| order by tostring(Name) asc\\n\",\"size\":2,\"showRefreshButton\":true,\"showExportToExcel\":true,\"exportToExcelOptions\":\"all\",\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"crossComponentResources\":[\"value::tenant\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"export_date\",\"formatter\":5},{\"columnMatch\":\"Name\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"35ch\"}},{\"columnMatch\":\"Display Name\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkLabel\":\"\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"55ch\"}},{\"columnMatch\":\"Description\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkLabel\":\"Description\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"15ch\"}},{\"columnMatch\":\"State\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"compliant\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"noncompliant\",\"representation\":\"4\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"exempt\",\"representation\":\"stopped\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"more\",\"text\":\"{0}{1}\"}],\"customColumnWidthSetting\":\"16ch\"}},{\"columnMatch\":\"policy_definition_group_display_name\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true}},{\"columnMatch\":\"policy_definition_group_description\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true}}],\"rowLimit\":10000,\"filter\":true}},\"name\":\"query - export\"}]},\"conditionalVisibility\":{\"parameterName\":\"_selected_tab\",\"comparison\":\"isEqualTo\",\"value\":\"export\"},\"name\":\"group - export\",\"styleSettings\":{\"showBorder\":true}},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"crossComponentResources\":[\"value::tenant\"],\"parameters\":[{\"id\":\"5aa0730f-1995-4042-af6f-b53dc492455f\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"_workspace\",\"label\":\"Workspace\",\"type\":5,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"where type =~ 'microsoft.operationalinsights/workspaces'\\n| order by name asc\\n| project id\",\"crossComponentResources\":[\"value::tenant\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"defaultValue\":\"value::all\",\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"value\":[\"/subscriptions/e69dbcc3-462b-43fe-b1f9-e1e68ef8328a/resourceGroups/rg-operations-fnd-euwe-001/providers/Microsoft.OperationalInsights/workspaces/log-operations-fnd-euwe-001\"]},{\"id\":\"0bb6984c-a3f3-4e92-ae38-e96fe267371a\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"_time_range\",\"label\":\"Time Range\",\"type\":4,\"isRequired\":true,\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}],\"allowCustom\":true},\"timeContext\":{\"durationMs\":86400000},\"value\":{\"durationMs\":86400000}},{\"id\":\"e36c18b8-ea95-479a-837a-929eafbe3672\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"_policy_insights_table_check\",\"type\":1,\"query\":\"search *\\n| distinct Type\\n| extend policy_insights_table_exists = iff(Type contains 'PolicyInsights_CL', true, false)\\n| summarize policy_insights_table_exists=max(policy_insights_table_exists)\\n| extend message= iff(policy_insights_table_exists, 'Found PolicyInsights_CL table in at least one of the selected workspaces', 'Did not find PolicyInsights_CL table in any of the selected workspaces')\\n| project message\\n\",\"crossComponentResources\":[\"{_workspace}\"],\"isHiddenWhenLocked\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"403c1d34-3dcb-4d2a-b86d-c2e44ac06c68\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"_exclude_resource_groups\",\"label\":\"Exclude Resource Groups\",\"type\":2,\"description\":\"Resources in selected resource groups will be exckluded from the query results\",\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"resourcecontainers\\n| where type == 'microsoft.resources/subscriptions/resourcegroups'\\n| extend subscription_id = tolower(strcat('/subscriptions/', subscriptionId))\\n| where subscription_id in ({_subscriptions})\\n| join kind=leftouter(\\n    resourcecontainers\\n    | where type == 'microsoft.resources/subscriptions'\\n    | extend subscription_id = tolower(id)\\n    | project subscription_id, subscription_name=name\\n) on subscription_id\\n| order by subscription_name, name asc\\n| project value=id, label=name, selected=false, group=subscription_name\",\"crossComponentResources\":[\"value::tenant\"],\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\"}],\"style\":\"above\",\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\"},\"name\":\"parameters - 0\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"title\":\"Readme\",\"expandable\":true,\"items\":[{\"type\":1,\"content\":{\"json\":\"Policy state history relies on the collection of policy state state events created by the [Azure Event Grid](https://learn.microsoft.com/en-us/azure/event-grid/event-schema-policy?tabs=event-grid-event-schema) into a Log Analytics Workspace. An example on how to setup such a configuration can be found here [TBD]. <br>\\n\\nBy default the workbook will query the **PolicyInisghts_CL** table on all the selected workspaces from the **Workspace** parameter. To improve query performance select only the workspace that contains the **PolicyInisghts_CL** table. To prevent this action the next time save the workbook after you made the workspace selection.\"},\"name\":\"text - 0\"}]},\"name\":\"group - 8\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let resource_group_filter = dynamic([{_exclude_resource_groups}]);\\nPolicyInsights_CL\\n| where data_policyAssignmentId_s =~ '{_assignment}'\\n| where data_subscriptionId_g in~ ({_subscriptions:subid})\\n| where eventType_s =~ 'Microsoft.PolicyInsights.PolicyStateCreated' or eventType_s =~ 'Microsoft.PolicyInsights.PolicyStateChanged'\\n| extend resource_group_name = substring(subject_s, 0, indexof(subject_s, '/', 1, -1, 4))\\n| where array_length(resource_group_filter) == 0 or resource_group_name !in~ (resource_group_filter)\\n| summarize arg_max(eventTime_t, data_complianceState_s) by subject_s, data_policyDefinitionId_s\\n| summarize count() by data_complianceState_s\\n\",\"size\":4,\"title\":\"Latest Policy State Changes\",\"timeContextFromParameter\":\"_time_range\",\"exportFieldName\":\"label\",\"exportParameterName\":\"_compliance_state\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{_workspace}\"],\"visualization\":\"piechart\",\"sortBy\":[],\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"Compliant\",\"color\":\"green\"},{\"seriesName\":\"NonCompliant\",\"color\":\"redBright\"},{\"seriesName\":\"Exempt\",\"color\":\"gray\"},{\"color\":\"blue\"}]}},\"customWidth\":\"33\",\"showPin\":false,\"name\":\"query - created\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let resource_group_filter = dynamic([{_exclude_resource_groups}]);\\nPolicyInsights_CL\\n| where data_policyAssignmentId_s =~ '{_assignment}'\\n| where data_subscriptionId_g in~ ({_subscriptions:subid})\\n| where eventType_s =~ 'Microsoft.PolicyInsights.PolicyStateCreated' or eventType_s =~ 'Microsoft.PolicyInsights.PolicyStateChanged'\\n| extend resource_group_name = substring(subject_s, 0, indexof(subject_s, '/', 1, -1, 4))\\n| where array_length(resource_group_filter) == 0 or resource_group_name !in~ (resource_group_filter)\\n| summarize arg_max(eventTime_t, data_complianceState_s) by subject_s, data_policyDefinitionId_s, data_subscriptionId_g\\n| where data_complianceState_s == 'NonCompliant'\\n| summarize noncompliant_policies=count() by subject_s, data_subscriptionId_g\\n| top 3 by noncompliant_policies\\n| project resource = subject_s, subscription=data_subscriptionId_g, noncompliant_policies\\n\",\"size\":4,\"title\":\"Top 3 Resources With NonCompliant Policy Changes\",\"noDataMessage\":\"Yah! No state changes resulted in NonCompliant policies.\",\"noDataMessageStyle\":3,\"timeContextFromParameter\":\"_time_range\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{_workspace}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"resource\",\"formatter\":13,\"formatOptions\":{\"linkTarget\":\"Resource\",\"showIcon\":true,\"customColumnWidthSetting\":\"75ch\"}},{\"columnMatch\":\"subscription\",\"formatter\":15,\"formatOptions\":{\"linkTarget\":null,\"showIcon\":true,\"customColumnWidthSetting\":\"25ch\"}}],\"sortBy\":[{\"itemKey\":\"noncompliant_policies\",\"sortOrder\":2}]},\"sortBy\":[{\"itemKey\":\"noncompliant_policies\",\"sortOrder\":2}]},\"customWidth\":\"67\",\"name\":\"query - 7\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"crossComponentResources\":[\"{_workspace}\"],\"parameters\":[{\"id\":\"1e55863a-9c17-4f00-9598-82aac28fb4ac\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"_compliance_state\",\"label\":\"Compliance State\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"{\\\"version\\\":\\\"1.0.0\\\",\\\"content\\\":\\\"[\\\\n {\\\\n \\\\\\\"value\\\\\\\": \\\\\\\"Compliant\\\\\\\",\\\\n  \\\\\\\"label\\\\\\\":  \\\\\\\"Compliant\\\\\\\"\\\\n },\\\\n {\\\\n \\\\\\\"value\\\\\\\": \\\\\\\"NonCompliant\\\\\\\",\\\\n  \\\\\\\"label\\\\\\\":  \\\\\\\"NonCompliant\\\\\\\"\\\\n },\\\\n {\\\\n \\\\\\\"value\\\\\\\": \\\\\\\"Exempt\\\\\\\",\\\\n  \\\\\\\"label\\\\\\\":  \\\\\\\"Exempt\\\\\\\"\\\\n },\\\\n {\\\\n \\\\\\\"value\\\\\\\": \\\\\\\"Error\\\\\\\",\\\\n  \\\\\\\"label\\\\\\\":  \\\\\\\"Error\\\\\\\"\\\\n },\\\\n {\\\\n \\\\\\\"value\\\\\\\": \\\\\\\"Conflict\\\\\\\",\\\\n  \\\\\\\"label\\\\\\\":  \\\\\\\"Conflict\\\\\\\"\\\\n },\\\\n {\\\\n \\\\\\\"value\\\\\\\": \\\\\\\"Protected\\\\\\\",\\\\n \\\\\\\"label\\\\\\\":  \\\\\\\"Protected\\\\\\\"\\\\n },\\\\n {\\\\n \\\\\\\"value\\\\\\\": \\\\\\\"Unknown\\\\\\\",\\\\n  \\\\\\\"label\\\\\\\":  \\\\\\\"Unknown\\\\\\\"\\\\n }\\\\n]\\\",\\\"transformers\\\":null}\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"defaultValue\":\"value::all\",\"queryType\":8,\"value\":[\"NonCompliant\",\"Compliant\"]},{\"id\":\"0c4c138a-d69f-4104-8a89-65b9955944d7\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"_event_type\",\"label\":\"Event Type\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"{\\\"version\\\":\\\"1.0.0\\\",\\\"content\\\":\\\"[\\\\n {\\\\n \\\\t\\\\\\\"value\\\\\\\": \\\\\\\"PolicyStateCreated\\\\\\\",\\\\n\\\\t\\\\\\\"label\\\\\\\": \\\\\\\"PolicyStateCreated\\\\\\\",\\\\n\\\\t\\\\\\\"selected\\\\\\\": true\\\\n },\\\\n {\\\\n \\\\t\\\\\\\"value\\\\\\\": \\\\\\\"PolicyStateChanged\\\\\\\",\\\\n\\\\t \\\\\\\"label\\\\\\\": \\\\\\\"PolicyStateChanged\\\\\\\",\\\\n\\\\t \\\\\\\"selected\\\\\\\": true\\\\n },\\\\n {\\\\n \\\\t\\\\\\\"value\\\\\\\": \\\\\\\"PolicyStateDeleted\\\\\\\",\\\\n\\\\t \\\\\\\"label\\\\\\\": \\\\\\\"PolicyStateDeleted\\\\\\\",\\\\n\\\\t \\\\\\\"selected\\\\\\\": false\\\\n }\\\\n]\\\",\\\"transformers\\\":null}\",\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"queryType\":8,\"value\":[\"PolicyStateCreated\",\"PolicyStateChanged\"]},{\"id\":\"14f7555b-7840-4fe1-96d8-a877666b078a\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"_resource\",\"label\":\"Resource\",\"type\":5,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"let resource_group_filter = dynamic([{_exclude_resource_groups}]);\\nPolicyInsights_CL\\n| where data_policyAssignmentId_s =~ '{_assignment}'\\n| where data_subscriptionId_g in~ ({_subscriptions:subid})\\n| extend resource_group_name = substring(subject_s, 0, indexof(subject_s, '/', 1, -1, 4))\\n| where array_length(resource_group_filter) == 0 or resource_group_name !in~ (resource_group_filter)\\n| extend resource_name = tostring(split(subject_s, '/')[-1])\\n| distinct subject_s, resource_name\\n| order by resource_name asc\\n| project subject_s\",\"crossComponentResources\":[\"{_workspace}\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"_time_range\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"2583cda3-4f9e-4a12-a061-f1f3b4c81fb5\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"_policy_definitions\",\"label\":\"Policy Definitions\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"policyresources \\n| where type =~ 'Microsoft.PolicyInsights/PolicyStates'\\n| extend policy_assignment_id = tolower(tostring(properties.policyAssignmentId)) \\n| where policy_assignment_id == '{_assignment}' // selector\\n| extend policy_definition_id = tolower(tolower(properties.policyDefinitionId))\\n| distinct policy_definition_id\\n | join kind = leftouter \\n (\\n policyresources \\n | where type =~ 'Microsoft.Authorization/PolicyDefinitions'\\n | extend policy_definition_id = tolower(id)\\n | extend policy_definition_display_name = tostring(properties.displayName)\\n | extend policy_definition_category = tostring(properties.metadata.category)\\n | summarize by policy_definition_id, policy_definition_display_name, policy_definition_category\\n ) on policy_definition_id\\n| project policy_definition_id, policy_definition_display_name\\n| order by policy_definition_display_name asc\\n\",\"crossComponentResources\":[\"value::tenant\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"defaultValue\":\"value::all\",\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\"}],\"style\":\"above\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 5\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let resource_group_filter = dynamic([{_exclude_resource_groups}]);\\nPolicyInsights_CL\\n| where data_policyAssignmentId_s =~ '{_assignment}'\\n| where data_subscriptionId_g in~ ({_subscriptions:subid})\\n| where data_complianceState_s in~ ({_compliance_state})\\n| where data_policyDefinitionId_s in~ ({_policy_definitions})\\n| where subject_s in~ ({_resource})\\n| extend details = pack_all()\\n| extend event_type = case(\\n    eventType_s contains'PolicyStateCreated', 'PolicyStateCreated',\\n    eventType_s contains'PolicyStateChanged', 'PolicyStateChanged',\\n    eventType_s contains'PolicyStateDeleted', 'PolicyStateDeleted',\\n    'Uknown Type'\\n)\\n| where event_type in~ ({_event_type})\\n| extend resource_group_name = substring(subject_s, 0, indexof(subject_s, '/', 1, -1, 4))\\n| where array_length(resource_group_filter) == 0 or resource_group_name !in~ (resource_group_filter)\\n| extend alert_query = strcat('PolicyInsights_CL\\\\n', '| where data_policyDefinitionId_s == \\\"', data_policyDefinitionId_s , '\\\" and subject_s == \\\"', subject_s, '\\\" and data_complianceState_s == \\\"', data_complianceState_s, '\\\"')\\n| project\\n    event_time=eventTime_t,\\n    resource=subject_s,\\n    subscription=topic_s,\\n    policy_definition_id=data_policyDefinitionId_s,\\n    policy_definition_ref_id=data_policyDefinitionReferenceId_s,\\n    event_type,\\n    compliandce_state=data_complianceState_s,\\n    compliance_reason=data_complianceReasonCode_s, alert_query, details\\n| order by event_time, resource\",\"size\":2,\"timeContextFromParameter\":\"_time_range\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{_workspace}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"resource\",\"formatter\":13,\"formatOptions\":{\"linkTarget\":\"Resource\",\"showIcon\":true}},{\"columnMatch\":\"alert_query\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true}}],\"rowLimit\":10000},\"sortBy\":[]},\"conditionalVisibility\":{\"parameterName\":\"dummy\",\"comparison\":\"isEqualTo\",\"value\":\"hide\"},\"name\":\"query - policyinsights\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"policyresources\\n| where type == \\\"microsoft.authorization/policydefinitions\\\"\\n| extend detail = pack_all()\\n| project policy_definition_id=tolower(id), policy_definition_display_name = properties.displayName\",\"size\":0,\"queryType\":1,\"resourceType\":\"microsoft.resources/tenants\",\"crossComponentResources\":[\"value::tenant\"],\"gridSettings\":{\"rowLimit\":10000}},\"conditionalVisibility\":{\"parameterName\":\"dummy\",\"comparison\":\"isEqualTo\",\"value\":\"hide\"},\"name\":\"query - policy. definitions\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"{\\\"version\\\":\\\"Merge/1.0\\\",\\\"merges\\\":[{\\\"id\\\":\\\"f46e987b-3477-47bc-a78b-24abb3968113\\\",\\\"mergeType\\\":\\\"leftouter\\\",\\\"leftTable\\\":\\\"query - policyinsights\\\",\\\"rightTable\\\":\\\"query - policy. definitions\\\",\\\"leftColumn\\\":\\\"policy_definition_id\\\",\\\"rightColumn\\\":\\\"policy_definition_id\\\"}],\\\"projectRename\\\":[{\\\"originalName\\\":\\\"[query - policyinsights].event_time\\\",\\\"mergedName\\\":\\\"event_time\\\",\\\"fromId\\\":\\\"f46e987b-3477-47bc-a78b-24abb3968113\\\"},{\\\"originalName\\\":\\\"[query - policyinsights].resource\\\",\\\"mergedName\\\":\\\"resource\\\",\\\"fromId\\\":\\\"f46e987b-3477-47bc-a78b-24abb3968113\\\"},{\\\"originalName\\\":\\\"[query - policyinsights].subscription\\\",\\\"mergedName\\\":\\\"subscription\\\",\\\"fromId\\\":\\\"f46e987b-3477-47bc-a78b-24abb3968113\\\"},{\\\"originalName\\\":\\\"[query - policy. definitions].policy_definition_display_name\\\",\\\"mergedName\\\":\\\"policy_definition_display_name\\\",\\\"fromId\\\":\\\"unknown\\\"},{\\\"originalName\\\":\\\"[query - policyinsights].policy_definition_id\\\",\\\"mergedName\\\":\\\"policy_definition_id\\\",\\\"fromId\\\":\\\"f46e987b-3477-47bc-a78b-24abb3968113\\\"},{\\\"originalName\\\":\\\"[query - policyinsights].policy_definition_ref_id\\\",\\\"mergedName\\\":\\\"policy_definition_ref_id\\\",\\\"fromId\\\":\\\"f46e987b-3477-47bc-a78b-24abb3968113\\\"},{\\\"originalName\\\":\\\"[query - policyinsights].event_type\\\",\\\"mergedName\\\":\\\"event_type\\\",\\\"fromId\\\":\\\"f46e987b-3477-47bc-a78b-24abb3968113\\\"},{\\\"originalName\\\":\\\"[query - policyinsights].compliandce_state\\\",\\\"mergedName\\\":\\\"compliandce_state\\\",\\\"fromId\\\":\\\"f46e987b-3477-47bc-a78b-24abb3968113\\\"},{\\\"originalName\\\":\\\"[query - policyinsights].compliance_reason\\\",\\\"mergedName\\\":\\\"compliance_reason\\\",\\\"fromId\\\":\\\"f46e987b-3477-47bc-a78b-24abb3968113\\\"},{\\\"originalName\\\":\\\"[query - policyinsights].alert_query\\\",\\\"mergedName\\\":\\\"alert_query\\\",\\\"fromId\\\":\\\"unknown\\\"},{\\\"originalName\\\":\\\"[query - policyinsights].details\\\",\\\"mergedName\\\":\\\"details\\\",\\\"fromId\\\":\\\"f46e987b-3477-47bc-a78b-24abb3968113\\\"},{\\\"originalName\\\":\\\"[query - policy. definitions].policy_definition_id\\\",\\\"mergedName\\\":\\\"policy_definition_id1\\\",\\\"fromId\\\":\\\"f46e987b-3477-47bc-a78b-24abb3968113\\\"}]}\",\"size\":2,\"queryType\":7,\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"event_time\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"22ch\"}},{\"columnMatch\":\"resource\",\"formatter\":13,\"formatOptions\":{\"linkTarget\":\"Resource\",\"showIcon\":true,\"customColumnWidthSetting\":\"28ch\"}},{\"columnMatch\":\"subscription\",\"formatter\":15,\"formatOptions\":{\"linkTarget\":\"Resource\",\"showIcon\":true,\"customColumnWidthSetting\":\"28ch\"}},{\"columnMatch\":\"policy_definition_display_name\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"OpenBlade\",\"bladeOpenContext\":{\"bladeName\":\"PolicyDetailBlade\",\"extensionName\":\"Microsoft_Azure_Policy\",\"bladeParameters\":[{\"name\":\"definitionId\",\"source\":\"column\",\"value\":\"policy_definition_id\"}]},\"customColumnWidthSetting\":\"75ch\"}},{\"columnMatch\":\"policy_definition_id\",\"formatter\":5},{\"columnMatch\":\"policy_definition_ref_id\",\"formatter\":5},{\"columnMatch\":\"alert_query\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkLabel\":\"Alert Query\",\"linkIsContextBlade\":true,\"customColumnWidthSetting\":\"16ch\"}},{\"columnMatch\":\"details\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkLabel\":\"Details\",\"linkIsContextBlade\":true}}],\"rowLimit\":10000,\"filter\":true}},\"showPin\":false,\"name\":\"query - policyinsights_merge\",\"styleSettings\":{\"showBorder\":true}}]},\"conditionalVisibility\":{\"parameterName\":\"_selected_tab\",\"comparison\":\"isEqualTo\",\"value\":\"state_changes\"},\"name\":\"group - history\"},{\"type\":1,\"content\":{\"json\":\"----\\n<div style=\\\"text-align: right\\\"> *Regulatory Compliance Dashboard v.{_template_version}*</div>\\n<div style=\\\"text-align: right\\\"> *Created and maintained by [Eurofiber Cloud Infra](https://github.com/Eurofiber-CloudInfra/azure-compliance-workbooks)*</div>\"},\"name\":\"text - footer\"}],\"isLocked\":true,\"fallbackResourceIds\":[\"Azure Security Center\"]}"
      }
    }
  ]
}
